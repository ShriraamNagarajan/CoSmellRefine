// <auto-generated />
using System;
using CoSmellRefine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoSmellRefine.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240615010045_Modified Question Table")]
    partial class ModifiedQuestionTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeSmellCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodeSmellCategoryId");

                    b.ToTable("CodeSmells");

                    b.HasData(
                        new
                        {
                            Id = new Guid("579ba1b7-1b50-4095-b7d5-03670cffe42d"),
                            CodeSmellCategoryId = new Guid("6e9f9feb-e0c3-4bef-b62a-714dc010dfe2"),
                            Description = "A Long Method is a method that contains too many lines of code.",
                            Name = "Long Method"
                        },
                        new
                        {
                            Id = new Guid("3419bfc8-fd57-4579-8273-a2725e026b8e"),
                            CodeSmellCategoryId = new Guid("6e9f9feb-e0c3-4bef-b62a-714dc010dfe2"),
                            Description = "A Large Class is a class that contains too many fields, methods, or lines of code.",
                            Name = "Large Class"
                        },
                        new
                        {
                            Id = new Guid("20dfbb9c-44a9-4b0f-ad5c-b63ee265bc40"),
                            CodeSmellCategoryId = new Guid("6e9f9feb-e0c3-4bef-b62a-714dc010dfe2"),
                            Description = "Primitive Obsession occurs when you use primitive data types for tasks that could be better handled by small objects.",
                            Name = "Primitive Obsession"
                        },
                        new
                        {
                            Id = new Guid("13a065d5-ca26-4d8a-a111-00d5d8a54a66"),
                            CodeSmellCategoryId = new Guid("6e9f9feb-e0c3-4bef-b62a-714dc010dfe2"),
                            Description = "A Long Parameter List occurs when a method has more than three or four parameters.",
                            Name = "Long Parameter List"
                        },
                        new
                        {
                            Id = new Guid("7bce4eec-ca0b-49b9-a6a5-3406fbd360da"),
                            CodeSmellCategoryId = new Guid("6e9f9feb-e0c3-4bef-b62a-714dc010dfe2"),
                            Description = "Data Clumps occur when identical groups of variables appear in different parts of the code.",
                            Name = "Data Clumps"
                        },
                        new
                        {
                            Id = new Guid("ab012817-acf6-421c-bf25-95559212c115"),
                            CodeSmellCategoryId = new Guid("c6e22fbc-5507-4e32-90bc-059c10f3297f"),
                            Description = "Switch Statements are defined by the presence of a complex switch operator or a sequence of if statements.",
                            Name = "Switch Statements"
                        },
                        new
                        {
                            Id = new Guid("39fad3d6-cee6-4bac-8af8-15c8734670dc"),
                            CodeSmellCategoryId = new Guid("c6e22fbc-5507-4e32-90bc-059c10f3297f"),
                            Description = "Temporary Fields are fields in a class that get their values only under certain circumstances and remain empty the rest of the time.",
                            Name = "Temporary Field"
                        },
                        new
                        {
                            Id = new Guid("5c48b022-bde1-4951-b7cf-cf8b483595a8"),
                            CodeSmellCategoryId = new Guid("c6e22fbc-5507-4e32-90bc-059c10f3297f"),
                            Description = "Refused Bequest occurs when a subclass uses only some of the methods and properties inherited from its parent class.",
                            Name = "Refused Bequest"
                        },
                        new
                        {
                            Id = new Guid("98d0960b-8388-4021-9de7-aebb71720883"),
                            CodeSmellCategoryId = new Guid("c6e22fbc-5507-4e32-90bc-059c10f3297f"),
                            Description = "Alternative Classes with Different Interfaces occur when two classes perform identical functions but have different method names.",
                            Name = "Alternative Classes with Different Interfaces"
                        },
                        new
                        {
                            Id = new Guid("ecfea6ee-d995-4a57-a0ea-370b1d09f1c5"),
                            CodeSmellCategoryId = new Guid("51b3010a-c2c7-496b-963c-e90ec30f3de8"),
                            Description = "Divergent Change occurs when you find yourself having to change many unrelated methods whenever you make changes to a class.",
                            Name = "Divergent Change"
                        },
                        new
                        {
                            Id = new Guid("794dcb80-b164-4753-bf12-601d7b65426d"),
                            CodeSmellCategoryId = new Guid("51b3010a-c2c7-496b-963c-e90ec30f3de8"),
                            Description = "Shotgun Surgery occurs when making any modification requires you to make many small changes to many different classes.",
                            Name = "Shotgun Surgery"
                        },
                        new
                        {
                            Id = new Guid("68907ad4-e064-4230-8f51-69c40f8bb403"),
                            CodeSmellCategoryId = new Guid("51b3010a-c2c7-496b-963c-e90ec30f3de8"),
                            Description = "Parallel Inheritance Hierarchy occurs when creating a subclass for one class requires you to create a subclass for another class.",
                            Name = "Parallel Inheritance Hierarchies"
                        },
                        new
                        {
                            Id = new Guid("2a5ac66d-7d11-4e88-8efb-ce159bd74f30"),
                            CodeSmellCategoryId = new Guid("c7180354-60c6-4661-860d-eb0d23561602"),
                            Description = "Comments in code are meant to explain what the code does, but they can also be a sign of underlying issues.",
                            Name = "Comments"
                        },
                        new
                        {
                            Id = new Guid("bee57ecb-d3da-49b7-b046-d5a6eb998d6c"),
                            CodeSmellCategoryId = new Guid("c7180354-60c6-4661-860d-eb0d23561602"),
                            Description = "It's when two or more code fragments in your program are nearly or entirely the same.",
                            Name = "Duplicate Code"
                        },
                        new
                        {
                            Id = new Guid("6db6eadd-9a43-458d-babc-a0b18e99b66f"),
                            CodeSmellCategoryId = new Guid("c7180354-60c6-4661-860d-eb0d23561602"),
                            Description = "A Lazy Class is a class that doesn't do enough to justify its existence in your codebase.",
                            Name = "Lazy Class"
                        },
                        new
                        {
                            Id = new Guid("36161d94-8851-4fab-8e6a-2e3e61530bc2"),
                            CodeSmellCategoryId = new Guid("c7180354-60c6-4661-860d-eb0d23561602"),
                            Description = "A Data Class is a class that contains only fields and crude methods for accessing them, such as getters and setters.",
                            Name = "Data Class"
                        },
                        new
                        {
                            Id = new Guid("47ccc613-d146-483c-8e8e-03072ec6e588"),
                            CodeSmellCategoryId = new Guid("c7180354-60c6-4661-860d-eb0d23561602"),
                            Description = "Dead Code refers to any variable, parameter, field, method, or class that is no longer used in your program.",
                            Name = "Dead Code"
                        },
                        new
                        {
                            Id = new Guid("663e4f72-33da-40cd-b8c8-f0e9bb5122a9"),
                            CodeSmellCategoryId = new Guid("c7180354-60c6-4661-860d-eb0d23561602"),
                            Description = "Speculative Generality occurs when there’s an unused class, method, field, or parameter in your code.",
                            Name = "Speculative Generality"
                        },
                        new
                        {
                            Id = new Guid("cc6bba15-ced7-436c-91a2-a90d35a5c99d"),
                            CodeSmellCategoryId = new Guid("9744b6e9-40f2-4b3d-90ca-e11f740a7a28"),
                            Description = "It's a situation where a method in one class is overly interested in the data of another class, indicating that the method might belong in the other class.",
                            Name = "Feature Envy"
                        },
                        new
                        {
                            Id = new Guid("687d1817-12b7-4ece-9cc2-03593349e03d"),
                            CodeSmellCategoryId = new Guid("9744b6e9-40f2-4b3d-90ca-e11f740a7a28"),
                            Description = "Inappropriate Intimacy occurs when one class uses the internal fields and methods of another class.",
                            Name = "Inappropriate Intimacy"
                        },
                        new
                        {
                            Id = new Guid("57186e72-5735-43f1-bc91-17dc5e0f79bf"),
                            CodeSmellCategoryId = new Guid("9744b6e9-40f2-4b3d-90ca-e11f740a7a28"),
                            Description = "A Message Chain occurs when you see a series of calls like $a->b()->c()->d() in your code.",
                            Name = "Message Chains"
                        },
                        new
                        {
                            Id = new Guid("348c1d7c-1494-4250-a752-212eaef03f88"),
                            CodeSmellCategoryId = new Guid("9744b6e9-40f2-4b3d-90ca-e11f740a7a28"),
                            Description = "It's a class that exists solely to pass messages to another class, without adding any real value itself.",
                            Name = "Middle Man"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmellCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CodeSmellCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e9f9feb-e0c3-4bef-b62a-714dc010dfe2"),
                            Description = "Bloaters are code, methods, and classes that become excessively large and difficult to manage. These issues typically develop gradually as the program evolves, especially if no effort is made to address them.",
                            Name = "Bloaters"
                        },
                        new
                        {
                            Id = new Guid("c6e22fbc-5507-4e32-90bc-059c10f3297f"),
                            Description = "All these code smells result from the incomplete or incorrect application of object-oriented programming principles.",
                            Name = "Object Orientation Abusers"
                        },
                        new
                        {
                            Id = new Guid("51b3010a-c2c7-496b-963c-e90ec30f3de8"),
                            Description = "These code smells indicate that changing one part of the code requires multiple changes elsewhere, making program development more complex and costly.",
                            Name = "Change Preventers"
                        },
                        new
                        {
                            Id = new Guid("c7180354-60c6-4661-860d-eb0d23561602"),
                            Description = "A dispensable is an unnecessary element whose removal would make the code cleaner, more efficient, and easier to understand.",
                            Name = "Dispensables"
                        },
                        new
                        {
                            Id = new Guid("9744b6e9-40f2-4b3d-90ca-e11f740a7a28"),
                            Description = "All the smells in this group contribute to excessive coupling between classes or result from replacing coupling with excessive delegation.",
                            Name = "Couplers"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.EducationalProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("EducationalProgress");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Flashcard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeSmellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadingContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodeSmellId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleVideos");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a88c7b4-62cf-4c60-b7f4-796324d37d76"),
                            IsRead = false,
                            Message = "This is your first notification",
                            SentTime = new DateTime(2024, 6, 13, 1, 0, 44, 533, DateTimeKind.Utc).AddTicks(8942),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        },
                        new
                        {
                            Id = new Guid("5cfd6987-5b43-4691-963f-502cf98feb47"),
                            IsRead = true,
                            Message = "This is your second notification",
                            SentTime = new DateTime(2024, 6, 14, 1, 0, 44, 533, DateTimeKind.Utc).AddTicks(8953),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        },
                        new
                        {
                            Id = new Guid("58468023-25de-4f8b-9646-2758fa476783"),
                            IsRead = false,
                            Message = "This is your first notification",
                            SentTime = new DateTime(2024, 6, 12, 1, 0, 44, 533, DateTimeKind.Utc).AddTicks(8960),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeSnippet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionImages");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuestionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId1");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.RefactoringTechnique", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefactoringTechniques");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ReportIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscussionItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReportIssues");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ResponseComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("ResponseComments");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.UserProfileImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("UserProfileImages");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("CodeSmellQuestion", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "QuestionListId");

                    b.HasIndex("QuestionListId");

                    b.ToTable("CodeSmellQuestion");
                });

            modelBuilder.Entity("CodeSmellQuestionResponse", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "ResponseListId");

                    b.HasIndex("ResponseListId");

                    b.ToTable("CodeSmellQuestionResponse");
                });

            modelBuilder.Entity("CodeSmellRefactoringTechnique", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefactoringTechniqueListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "RefactoringTechniqueListId");

                    b.HasIndex("RefactoringTechniqueListId");

                    b.ToTable("CodeSmellRefactoringTechnique");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80abfbab-92b8-454d-b82b-50b4a1568ec2",
                            ConcurrencyStamp = "80abfbab-92b8-454d-b82b-50b4a1568ec2",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033",
                            ConcurrencyStamp = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033",
                            Name = "Moderator",
                            NormalizedName = "Moderator"
                        },
                        new
                        {
                            Id = "06b0066a-4de5-412e-9d62-0dda4d0cc709",
                            ConcurrencyStamp = "06b0066a-4de5-412e-9d62-0dda4d0cc709",
                            Name = "Developer",
                            NormalizedName = "Developer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0bb96526-4ffd-4846-8e00-ac29d53671d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a622738-2a5d-4c87-8ad6-9f24ebb0f098",
                            Email = "admin@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COSMELLREFINE.COM",
                            NormalizedUserName = "ADMIN@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEESXuWX1yiusB8OBjOGgmmBqcQaTqtPRJrPcx4pBTFfCwdU2wce4jixrtesWC4E10g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb936f4c-eca5-44e2-88d4-3df8fc9a3199",
                            TwoFactorEnabled = false,
                            UserName = "admin@cosmellrefine.com"
                        },
                        new
                        {
                            Id = "9411a478-8335-4360-9a4c-9640eb2e18cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd981552-0428-4e4d-959d-f3c12bb13416",
                            Email = "moderator@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@COSMELLREFINE.COM",
                            NormalizedUserName = "MODERATOR@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFXwS4ObNi7u37+p81WrVqDy5c1xUD6usPmLnkoYz5W59ZJ8BzjYhAz2vVARXBbwfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2dc520c6-b173-4b8e-9c35-ba154bbd9660",
                            TwoFactorEnabled = false,
                            UserName = "moderator@cosmellrefine.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0",
                            RoleId = "80abfbab-92b8-454d-b82b-50b4a1568ec2"
                        },
                        new
                        {
                            UserId = "9411a478-8335-4360-9a4c-9640eb2e18cd",
                            RoleId = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuestionRefactoringTechnique", b =>
                {
                    b.Property<Guid>("QuestionListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefactoringTechniquesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionListId", "RefactoringTechniquesId");

                    b.HasIndex("RefactoringTechniquesId");

                    b.ToTable("QuestionRefactoringTechnique");
                });

            modelBuilder.Entity("QuestionResponseRefactoringTechnique", b =>
                {
                    b.Property<Guid>("RefactoringTechniquesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefactoringTechniquesId", "ResponseListId");

                    b.HasIndex("ResponseListId");

                    b.ToTable("QuestionResponseRefactoringTechnique");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmell", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmellCategory", "CodeSmellCategory")
                        .WithMany()
                        .HasForeignKey("CodeSmellCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmellCategory");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.EducationalProgress", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "CurrentModule")
                        .WithMany()
                        .HasForeignKey("CurrentModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentModule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Flashcard", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Flashcards")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", "CodeSmell")
                        .WithMany()
                        .HasForeignKey("CodeSmellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmell");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleVideo", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Videos")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Notification", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionImage", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", "Question")
                        .WithMany("Images")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId1");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Quiz", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Quizzes")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ReportIssue", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ResponseComment", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.UserProfileImage", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Vote", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", "Response")
                        .WithMany("Votes")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeSmellQuestion", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSmellQuestionResponse", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", null)
                        .WithMany()
                        .HasForeignKey("ResponseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSmellRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniqueListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionResponseRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", null)
                        .WithMany()
                        .HasForeignKey("ResponseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.Navigation("Flashcards");

                    b.Navigation("Quizzes");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}

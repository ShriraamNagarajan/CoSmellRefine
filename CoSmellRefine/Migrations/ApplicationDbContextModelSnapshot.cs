// <auto-generated />
using System;
using CoSmellRefine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoSmellRefine.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeSmellCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodeSmellCategoryId");

                    b.ToTable("CodeSmells");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74de66e1-96f2-46b8-9464-a404925f6c61"),
                            CodeSmellCategoryId = new Guid("5e604a4d-0fe5-407e-9d20-7ebcaf7f72a1"),
                            Description = "A Long Method is a method that contains too many lines of code.",
                            Name = "Long Method"
                        },
                        new
                        {
                            Id = new Guid("38aa7822-8ed0-4309-8608-4567bd75692c"),
                            CodeSmellCategoryId = new Guid("5e604a4d-0fe5-407e-9d20-7ebcaf7f72a1"),
                            Description = "A Large Class is a class that contains too many fields, methods, or lines of code.",
                            Name = "Large Class"
                        },
                        new
                        {
                            Id = new Guid("79dd83c3-155a-4272-a362-044d345a29c0"),
                            CodeSmellCategoryId = new Guid("5e604a4d-0fe5-407e-9d20-7ebcaf7f72a1"),
                            Description = "Primitive Obsession occurs when you use primitive data types for tasks that could be better handled by small objects.",
                            Name = "Primitive Obsession"
                        },
                        new
                        {
                            Id = new Guid("c6e6c383-2845-4959-a6e7-1ff513d1839e"),
                            CodeSmellCategoryId = new Guid("5e604a4d-0fe5-407e-9d20-7ebcaf7f72a1"),
                            Description = "A Long Parameter List occurs when a method has more than three or four parameters.",
                            Name = "Long Parameter List"
                        },
                        new
                        {
                            Id = new Guid("e74745e2-775e-4c23-ac1a-3e2ad421794d"),
                            CodeSmellCategoryId = new Guid("5e604a4d-0fe5-407e-9d20-7ebcaf7f72a1"),
                            Description = "Data Clumps occur when identical groups of variables appear in different parts of the code.",
                            Name = "Data Clumps"
                        },
                        new
                        {
                            Id = new Guid("d7c82c8e-68e0-4fb3-ac27-128be413319f"),
                            CodeSmellCategoryId = new Guid("29f27e4a-26fd-423f-a8f3-69b3d14d14d2"),
                            Description = "Switch Statements are defined by the presence of a complex switch operator or a sequence of if statements.",
                            Name = "Switch Statements"
                        },
                        new
                        {
                            Id = new Guid("61f1a799-1acd-46c4-8e95-a3b0efa07f9e"),
                            CodeSmellCategoryId = new Guid("29f27e4a-26fd-423f-a8f3-69b3d14d14d2"),
                            Description = "Temporary Fields are fields in a class that get their values only under certain circumstances and remain empty the rest of the time.",
                            Name = "Temporary Field"
                        },
                        new
                        {
                            Id = new Guid("654d4f72-5509-4daf-b9b2-a1dc42242fea"),
                            CodeSmellCategoryId = new Guid("29f27e4a-26fd-423f-a8f3-69b3d14d14d2"),
                            Description = "Refused Bequest occurs when a subclass uses only some of the methods and properties inherited from its parent class.",
                            Name = "Refused Bequest"
                        },
                        new
                        {
                            Id = new Guid("a2f0fc27-c429-43e3-9502-1ec5922f6c77"),
                            CodeSmellCategoryId = new Guid("29f27e4a-26fd-423f-a8f3-69b3d14d14d2"),
                            Description = "Alternative Classes with Different Interfaces occur when two classes perform identical functions but have different method names.",
                            Name = "Alternative Classes with Different Interfaces"
                        },
                        new
                        {
                            Id = new Guid("a42ccade-71f6-4b11-9be7-c613a30a12b5"),
                            CodeSmellCategoryId = new Guid("34618ef1-6f93-4f84-9959-99f341207f3c"),
                            Description = "Divergent Change occurs when you find yourself having to change many unrelated methods whenever you make changes to a class.",
                            Name = "Divergent Change"
                        },
                        new
                        {
                            Id = new Guid("4c446165-4fde-473c-b118-18a290030b0e"),
                            CodeSmellCategoryId = new Guid("34618ef1-6f93-4f84-9959-99f341207f3c"),
                            Description = "Shotgun Surgery occurs when making any modification requires you to make many small changes to many different classes.",
                            Name = "Shotgun Surgery"
                        },
                        new
                        {
                            Id = new Guid("73461dee-eab0-4d48-ac71-351a18a4bd75"),
                            CodeSmellCategoryId = new Guid("34618ef1-6f93-4f84-9959-99f341207f3c"),
                            Description = "Parallel Inheritance Hierarchy occurs when creating a subclass for one class requires you to create a subclass for another class.",
                            Name = "Parallel Inheritance Hierarchies"
                        },
                        new
                        {
                            Id = new Guid("a0b1d79f-2d60-470e-98c0-d1f561bae59c"),
                            CodeSmellCategoryId = new Guid("a2b122e6-95b5-4876-b958-982cf065c586"),
                            Description = "Comments in code are meant to explain what the code does, but they can also be a sign of underlying issues.",
                            Name = "Comments"
                        },
                        new
                        {
                            Id = new Guid("58a91a2d-8928-4039-8303-ac5fd5ba1b0f"),
                            CodeSmellCategoryId = new Guid("a2b122e6-95b5-4876-b958-982cf065c586"),
                            Description = "It's when two or more code fragments in your program are nearly or entirely the same.",
                            Name = "Duplicate Code"
                        },
                        new
                        {
                            Id = new Guid("ebd13c41-1f3f-4bdc-aeaf-ee5dce5ed50b"),
                            CodeSmellCategoryId = new Guid("a2b122e6-95b5-4876-b958-982cf065c586"),
                            Description = "A Lazy Class is a class that doesn't do enough to justify its existence in your codebase.",
                            Name = "Lazy Class"
                        },
                        new
                        {
                            Id = new Guid("2a60268b-692b-4964-96a0-d4f1045f5370"),
                            CodeSmellCategoryId = new Guid("a2b122e6-95b5-4876-b958-982cf065c586"),
                            Description = "A Data Class is a class that contains only fields and crude methods for accessing them, such as getters and setters.",
                            Name = "Data Class"
                        },
                        new
                        {
                            Id = new Guid("2aa28253-fa7f-4111-b910-7483fd582300"),
                            CodeSmellCategoryId = new Guid("a2b122e6-95b5-4876-b958-982cf065c586"),
                            Description = "Dead Code refers to any variable, parameter, field, method, or class that is no longer used in your program.",
                            Name = "Dead Code"
                        },
                        new
                        {
                            Id = new Guid("b2ce7772-adce-4e86-aaf5-35782b89db14"),
                            CodeSmellCategoryId = new Guid("a2b122e6-95b5-4876-b958-982cf065c586"),
                            Description = "Speculative Generality occurs when there’s an unused class, method, field, or parameter in your code.",
                            Name = "Speculative Generality"
                        },
                        new
                        {
                            Id = new Guid("c62e90cc-3666-486e-a93e-4cafbe6035d8"),
                            CodeSmellCategoryId = new Guid("4c54f675-91a7-4057-9fc6-b8ff2d5d5326"),
                            Description = "It's a situation where a method in one class is overly interested in the data of another class, indicating that the method might belong in the other class.",
                            Name = "Feature Envy"
                        },
                        new
                        {
                            Id = new Guid("3cdff99a-7385-4ab3-84d6-11c2000d30ef"),
                            CodeSmellCategoryId = new Guid("4c54f675-91a7-4057-9fc6-b8ff2d5d5326"),
                            Description = "Inappropriate Intimacy occurs when one class uses the internal fields and methods of another class.",
                            Name = "Inappropriate Intimacy"
                        },
                        new
                        {
                            Id = new Guid("76300348-775a-4c22-ba00-ab3d330a2854"),
                            CodeSmellCategoryId = new Guid("4c54f675-91a7-4057-9fc6-b8ff2d5d5326"),
                            Description = "A Message Chain occurs when you see a series of calls like $a->b()->c()->d() in your code.",
                            Name = "Message Chains"
                        },
                        new
                        {
                            Id = new Guid("ac53afe5-22b7-4ab2-a85a-fdf1b8848bba"),
                            CodeSmellCategoryId = new Guid("4c54f675-91a7-4057-9fc6-b8ff2d5d5326"),
                            Description = "It's a class that exists solely to pass messages to another class, without adding any real value itself.",
                            Name = "Middle Man"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmellCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CodeSmellCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e604a4d-0fe5-407e-9d20-7ebcaf7f72a1"),
                            Description = "Bloaters are code, methods, and classes that become excessively large and difficult to manage. These issues typically develop gradually as the program evolves, especially if no effort is made to address them.",
                            ImageUrl = "https://finance-blog-post.s3.amazonaws.com/bloaters.png",
                            Name = "Bloaters"
                        },
                        new
                        {
                            Id = new Guid("29f27e4a-26fd-423f-a8f3-69b3d14d14d2"),
                            Description = "All these code smells result from the incomplete or incorrect application of object-oriented programming principles.",
                            ImageUrl = "https://finance-blog-post.s3.amazonaws.com/object_orientation_abusers.png",
                            Name = "Object Orientation Abusers"
                        },
                        new
                        {
                            Id = new Guid("34618ef1-6f93-4f84-9959-99f341207f3c"),
                            Description = "These code smells indicate that changing one part of the code requires multiple changes elsewhere, making program development more complex and costly.",
                            ImageUrl = "https://finance-blog-post.s3.amazonaws.com/change_preventers.png",
                            Name = "Change Preventers"
                        },
                        new
                        {
                            Id = new Guid("a2b122e6-95b5-4876-b958-982cf065c586"),
                            Description = "A dispensable is an unnecessary element whose removal would make the code cleaner, more efficient, and easier to understand.",
                            ImageUrl = "https://finance-blog-post.s3.amazonaws.com/dispensables.png",
                            Name = "Dispensables"
                        },
                        new
                        {
                            Id = new Guid("4c54f675-91a7-4057-9fc6-b8ff2d5d5326"),
                            Description = "All the smells in this group contribute to excessive coupling between classes or result from replacing coupling with excessive delegation.",
                            ImageUrl = "https://finance-blog-post.s3.amazonaws.com/couplers.png",
                            Name = "Couplers"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Flashcard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CodeSmellCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeSmellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReadingContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodeSmellCategoryId");

                    b.HasIndex("CodeSmellId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleCompletion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("ModuleCompletion");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleVideos");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d767b86-8dfc-47a2-9c23-25f1b3f0eb4a"),
                            IsRead = false,
                            Message = "This is your first notification",
                            SentTime = new DateTime(2024, 6, 26, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7446),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        },
                        new
                        {
                            Id = new Guid("6856e873-dc4b-4503-9bcc-7064926cceed"),
                            IsRead = true,
                            Message = "This is your second notification",
                            SentTime = new DateTime(2024, 6, 27, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7456),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        },
                        new
                        {
                            Id = new Guid("d29fc1fe-d852-4d7e-81d5-caebdc551297"),
                            IsRead = false,
                            Message = "This is your first notification",
                            SentTime = new DateTime(2024, 6, 25, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7459),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeSnippet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbe011e4-2c28-4a96-9943-e44bf15dc181"),
                            Body = "Body of question 1",
                            CodeSnippet = "CodeSnippet1",
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 6, 28, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7484),
                            PostedDate = new DateTime(2024, 6, 28, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7483),
                            Status = "Closed",
                            Title = "Question 1",
                            Type = "Code Smell Identification",
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        },
                        new
                        {
                            Id = new Guid("d611c77c-d12d-4f03-a2d3-bf6301a833ce"),
                            Body = "Body of question 2",
                            CodeSnippet = "CodeSnippet2",
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 6, 28, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7490),
                            PostedDate = new DateTime(2024, 6, 27, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7490),
                            Status = "Open",
                            Title = "Question 2",
                            Type = "Refactoring Technique Identification",
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionImages");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeSnippet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuestionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId1");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3924ce98-3d5d-4e07-aed0-86aba3c5eda8"),
                            Body = "Response to question 1",
                            CodeSnippet = "Console.WriteLine(\"Hello World\");",
                            IsDeleted = false,
                            PostedDate = new DateTime(2024, 6, 28, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7535),
                            QuestionId = new Guid("bbe011e4-2c28-4a96-9943-e44bf15dc181"),
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        },
                        new
                        {
                            Id = new Guid("2400ce12-6cbc-47d4-a022-3b6448dd7691"),
                            Body = "Another response to question 1",
                            CodeSnippet = "Console.WriteLine(\"Hello World\");",
                            IsDeleted = false,
                            PostedDate = new DateTime(2024, 6, 28, 9, 10, 51, 30, DateTimeKind.Utc).AddTicks(7539),
                            QuestionId = new Guid("d611c77c-d12d-4f03-a2d3-bf6301a833ce"),
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuizResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.RefactoringTechnique", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefactoringTechniques");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c14e70cd-a1fc-48ff-8396-f785401f5aaa"),
                            Description = "Move a method to another class if it clearly belongs there.",
                            Name = "Move Method"
                        },
                        new
                        {
                            Id = new Guid("b60928bf-64ad-4824-a33e-9196db9c0da2"),
                            Description = "Extract part of a method into a separate method and move it to the appropriate class.",
                            Name = "Extract Method"
                        },
                        new
                        {
                            Id = new Guid("5a3c19b4-0354-4990-8419-93a9789d2c1c"),
                            Description = "Hide public fields from direct access by using getters and setters.",
                            Name = "Encapsulate Field"
                        },
                        new
                        {
                            Id = new Guid("b5218c85-2fac-4641-bb11-b69ed7050066"),
                            Description = "Use assertions to make rules about a necessary state explicit in the code.",
                            Name = "Introduce Assertion"
                        },
                        new
                        {
                            Id = new Guid("4d589fdc-0e18-4d09-b682-923f350d913a"),
                            Description = "Move methods and data into a new class to isolate changes to specific parts of the system.",
                            Name = "Extract Class"
                        },
                        new
                        {
                            Id = new Guid("241faf55-f802-4f3d-bae0-7d59acbcfc3a"),
                            Description = "Replace type code with subclassing or state/strategy patterns.",
                            Name = "Replace Type Code with Subclass"
                        },
                        new
                        {
                            Id = new Guid("8a31f414-dc46-4465-8392-bbc7c1677171"),
                            Description = "Use polymorphism to replace the switch statement.",
                            Name = "Replace Conditional with Polymorphism"
                        },
                        new
                        {
                            Id = new Guid("77532039-c92a-44c9-99b8-65a5146e1d28"),
                            Description = "Use the Null Object pattern to handle default or missing cases in a switch statement.",
                            Name = "Introduce Null Object"
                        },
                        new
                        {
                            Id = new Guid("f7b43b02-e92c-4a2e-99d4-d3e97830dc3a"),
                            Description = "Move parts of one class to the class where they are used, but only if the first class truly doesn't need them.",
                            Name = "Move Field"
                        },
                        new
                        {
                            Id = new Guid("c252c47a-2b20-4f89-9da9-376cb42e00d4"),
                            Description = "Merge a subclass into its parent class to simplify the hierarchy.",
                            Name = "Collapse Hierarchy"
                        },
                        new
                        {
                            Id = new Guid("af71e55d-9d07-4f53-af1b-ed9b042bd620"),
                            Description = "Merge the components of a near-useless class into another class and remove the empty class.",
                            Name = "Inline Class"
                        },
                        new
                        {
                            Id = new Guid("4e72fcc1-f18c-4432-b0dc-7a935d93e9af"),
                            Description = "Simplify methods by removing unneeded parameters.",
                            Name = "Remove Parameter"
                        },
                        new
                        {
                            Id = new Guid("23494f01-2aea-460a-a50a-97ed606124cc"),
                            Description = "Use the Template Method pattern if the same code is found in two subclasses at the same level but isn't completely identical.",
                            Name = "Form Template Method"
                        },
                        new
                        {
                            Id = new Guid("057a96a8-d93a-4245-a0e1-af8cc1af18e6"),
                            Description = "Choose the best algorithm and replace others with it if two methods do the same thing but use different algorithms.",
                            Name = "Substitute Algorithm"
                        },
                        new
                        {
                            Id = new Guid("e5f14401-b3c0-41a5-83a2-aca1da8d90a5"),
                            Description = "Merge multiple conditional expressions performing the same code into a single condition and extract the common code into a new method.",
                            Name = "Consolidate Conditional Expression"
                        },
                        new
                        {
                            Id = new Guid("66b68563-bcb0-452e-b7d1-1239a167dc66"),
                            Description = "Move common code outside of the conditional expression if it is performed in all branches.",
                            Name = "Consolidate Duplicate Conditional Fragments"
                        },
                        new
                        {
                            Id = new Guid("14566781-7093-4259-901d-39bed97f0ffd"),
                            Description = "Simplify client code by hiding the message chain, providing a single method that handles the entire chain.",
                            Name = "Hide Delegate"
                        },
                        new
                        {
                            Id = new Guid("e4c3c6c2-a0b1-43b9-88cb-f6fc1cb6f830"),
                            Description = "Reduce dependency by changing mutually interdependent classes to unidirectional relationships.",
                            Name = "Change Bidirectional Association to Unidirectional"
                        },
                        new
                        {
                            Id = new Guid("a5cf3c83-8d1a-42bd-8183-f0181c6da65e"),
                            Description = "Use inheritance to formalize the relationship if the intimacy is between a subclass and its superclass.",
                            Name = "Replace Delegation with Inheritance"
                        },
                        new
                        {
                            Id = new Guid("fcb646aa-08b9-45a1-9ef2-c85ce3814e0a"),
                            Description = "Add methods externally to a library class to provide the needed functionality without modifying the original class.",
                            Name = "Introduce Foreign Method"
                        },
                        new
                        {
                            Id = new Guid("e098d5de-a734-4f60-96ea-bc857073b447"),
                            Description = "Create a local extension of the library class to extend and modify it to meet your needs while keeping the original library intact.",
                            Name = "Introduce Local Extension"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ReportIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscussionItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiscussionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReportIssues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16cf1537-a2ea-47d4-bc10-221785de2b7b"),
                            DiscussionItemId = new Guid("bbe011e4-2c28-4a96-9943-e44bf15dc181"),
                            DiscussionType = "Question",
                            Reason = "Inappropriate content",
                            ReportDate = new DateTime(2024, 6, 28, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7692),
                            Status = "In Review",
                            StatusReason = "None",
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        },
                        new
                        {
                            Id = new Guid("f3b8ebd8-6645-4c0c-aec4-0df12a1273d5"),
                            DiscussionItemId = new Guid("d611c77c-d12d-4f03-a2d3-bf6301a833ce"),
                            DiscussionType = "Response",
                            Reason = "Spam",
                            ReportDate = new DateTime(2024, 6, 28, 7, 40, 51, 30, DateTimeKind.Utc).AddTicks(7696),
                            Status = "No Action Needed",
                            StatusReason = "The content is appropriate",
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        },
                        new
                        {
                            Id = new Guid("f31dac25-6b83-45bc-97cb-ee0e4dabc125"),
                            DiscussionItemId = new Guid("d611c77c-d12d-4f03-a2d3-bf6301a833ce"),
                            DiscussionType = "Question",
                            Reason = "Duplicate content",
                            ReportDate = new DateTime(2024, 6, 28, 8, 40, 51, 30, DateTimeKind.Utc).AddTicks(7700),
                            Status = "Warned User",
                            StatusReason = "User comment is inappropriate",
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ResponseComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("ResponseComments");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.UserProfileImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("UserProfileImages");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a48be175-51af-44d2-87c2-b56ab18af0b7"),
                            IsUpvote = true,
                            ResponseId = new Guid("3924ce98-3d5d-4e07-aed0-86aba3c5eda8"),
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260",
                            VoteDate = new DateTime(2024, 6, 28, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7621)
                        },
                        new
                        {
                            Id = new Guid("7b9179cc-a062-4a38-bff0-c9dffe46783f"),
                            IsUpvote = false,
                            ResponseId = new Guid("3924ce98-3d5d-4e07-aed0-86aba3c5eda8"),
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260",
                            VoteDate = new DateTime(2024, 6, 28, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7666)
                        },
                        new
                        {
                            Id = new Guid("52b70545-2337-4630-8d8f-9d44602926d2"),
                            IsUpvote = true,
                            ResponseId = new Guid("2400ce12-6cbc-47d4-a022-3b6448dd7691"),
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260",
                            VoteDate = new DateTime(2024, 6, 28, 9, 40, 51, 30, DateTimeKind.Utc).AddTicks(7677)
                        });
                });

            modelBuilder.Entity("CodeSmellQuestion", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "QuestionListId");

                    b.HasIndex("QuestionListId");

                    b.ToTable("CodeSmellQuestion");
                });

            modelBuilder.Entity("CodeSmellQuestionResponse", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "ResponseListId");

                    b.HasIndex("ResponseListId");

                    b.ToTable("CodeSmellQuestionResponse");
                });

            modelBuilder.Entity("CodeSmellRefactoringTechnique", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefactoringTechniqueListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "RefactoringTechniqueListId");

                    b.HasIndex("RefactoringTechniqueListId");

                    b.ToTable("CodeSmellRefactoringTechnique");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80abfbab-92b8-454d-b82b-50b4a1568ec2",
                            ConcurrencyStamp = "80abfbab-92b8-454d-b82b-50b4a1568ec2",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033",
                            ConcurrencyStamp = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033",
                            Name = "Moderator",
                            NormalizedName = "Moderator"
                        },
                        new
                        {
                            Id = "06b0066a-4de5-412e-9d62-0dda4d0cc709",
                            ConcurrencyStamp = "06b0066a-4de5-412e-9d62-0dda4d0cc709",
                            Name = "Developer",
                            NormalizedName = "Developer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0bb96526-4ffd-4846-8e00-ac29d53671d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb93f9c3-2e48-4002-9fac-fa17ce3faf2e",
                            Email = "admin@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COSMELLREFINE.COM",
                            NormalizedUserName = "ADMIN@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKSC6pxpSOEvwCNK2b5FIqBAMtdS2Hv3UuU6o30qlUlQL33kC5jGukVciIT0FqXFRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c72bfacd-257e-46b9-81a9-1a6ba21bd347",
                            TwoFactorEnabled = false,
                            UserName = "admin@cosmellrefine.com"
                        },
                        new
                        {
                            Id = "9411a478-8335-4360-9a4c-9640eb2e18cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3b294e4-b8af-4cd0-bb85-44ecd6612db6",
                            Email = "moderator@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@COSMELLREFINE.COM",
                            NormalizedUserName = "MODERATOR@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxXWhiFWBUkkJtLMeVI9YaZo7TDuxLrFXQgGinpcq5vP//6z4eYsxodjH+viJEmJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10b2a9b2-ad92-4ec1-8a9c-392c0190aec7",
                            TwoFactorEnabled = false,
                            UserName = "moderator@cosmellrefine.com"
                        },
                        new
                        {
                            Id = "680a7849-11d6-44d1-8ec5-fdac6ca72260",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1add123-1903-47d3-ae78-cdd44bb95804",
                            Email = "developer@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEVELOPER@COSMELLREFINE.COM",
                            NormalizedUserName = "DEVELOPER@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOOdTu67GIJMOw8RnGGixpn6xOva4jY/0BB/qcXl/20hIY2KDbM3GnYXDoXpJ7VUYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a616aab5-5700-428c-b9f5-58d6f9ac160e",
                            TwoFactorEnabled = false,
                            UserName = "developer@cosmellrefine.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0",
                            RoleId = "80abfbab-92b8-454d-b82b-50b4a1568ec2"
                        },
                        new
                        {
                            UserId = "9411a478-8335-4360-9a4c-9640eb2e18cd",
                            RoleId = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033"
                        },
                        new
                        {
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260",
                            RoleId = "06b0066a-4de5-412e-9d62-0dda4d0cc709"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuestionRefactoringTechnique", b =>
                {
                    b.Property<Guid>("QuestionListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefactoringTechniquesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionListId", "RefactoringTechniquesId");

                    b.HasIndex("RefactoringTechniquesId");

                    b.ToTable("QuestionRefactoringTechnique");
                });

            modelBuilder.Entity("QuestionResponseRefactoringTechnique", b =>
                {
                    b.Property<Guid>("RefactoringTechniquesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefactoringTechniquesId", "ResponseListId");

                    b.HasIndex("ResponseListId");

                    b.ToTable("QuestionResponseRefactoringTechnique");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmell", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmellCategory", "CodeSmellCategory")
                        .WithMany()
                        .HasForeignKey("CodeSmellCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmellCategory");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Flashcard", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Flashcards")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmellCategory", "CodeSmellCategory")
                        .WithMany("Modules")
                        .HasForeignKey("CodeSmellCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", "CodeSmell")
                        .WithMany()
                        .HasForeignKey("CodeSmellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmell");

                    b.Navigation("CodeSmellCategory");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleCompletion", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleVideo", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Videos")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Notification", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionImage", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", "Question")
                        .WithMany("Images")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId1");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Quiz", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Quizzes")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuizResults", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ReportIssue", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ResponseComment", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.UserProfileImage", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Vote", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", "Response")
                        .WithMany("Votes")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeSmellQuestion", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSmellQuestionResponse", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", null)
                        .WithMany()
                        .HasForeignKey("ResponseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSmellRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniqueListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionResponseRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", null)
                        .WithMany()
                        .HasForeignKey("ResponseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmellCategory", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.Navigation("Flashcards");

                    b.Navigation("Quizzes");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}

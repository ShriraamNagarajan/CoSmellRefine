// <auto-generated />
using System;
using CoSmellRefine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoSmellRefine.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeSmellCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodeSmellCategoryId");

                    b.ToTable("CodeSmells");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00d3111b-c5c1-478d-9af1-a64dab038e12"),
                            CodeSmellCategoryId = new Guid("d516c542-1618-4037-b944-1adb5bac39b9"),
                            Description = "A Long Method is a method that contains too many lines of code.",
                            Name = "Long Method"
                        },
                        new
                        {
                            Id = new Guid("1c8bf61e-66e6-4cd8-8171-562a3fef21eb"),
                            CodeSmellCategoryId = new Guid("d516c542-1618-4037-b944-1adb5bac39b9"),
                            Description = "A Large Class is a class that contains too many fields, methods, or lines of code.",
                            Name = "Large Class"
                        },
                        new
                        {
                            Id = new Guid("1e062bea-264d-4d1a-b4e0-50acf07e1871"),
                            CodeSmellCategoryId = new Guid("d516c542-1618-4037-b944-1adb5bac39b9"),
                            Description = "Primitive Obsession occurs when you use primitive data types for tasks that could be better handled by small objects.",
                            Name = "Primitive Obsession"
                        },
                        new
                        {
                            Id = new Guid("96d5e052-d0dc-40f4-ab94-4ce2353f6b66"),
                            CodeSmellCategoryId = new Guid("d516c542-1618-4037-b944-1adb5bac39b9"),
                            Description = "A Long Parameter List occurs when a method has more than three or four parameters.",
                            Name = "Long Parameter List"
                        },
                        new
                        {
                            Id = new Guid("bed63c07-c721-49da-85c8-c0553b09ae12"),
                            CodeSmellCategoryId = new Guid("d516c542-1618-4037-b944-1adb5bac39b9"),
                            Description = "Data Clumps occur when identical groups of variables appear in different parts of the code.",
                            Name = "Data Clumps"
                        },
                        new
                        {
                            Id = new Guid("20b59542-2451-49c9-b390-c74ce685d20f"),
                            CodeSmellCategoryId = new Guid("b31adc79-2529-46b7-8cd6-f36b570f3eb2"),
                            Description = "Switch Statements are defined by the presence of a complex switch operator or a sequence of if statements.",
                            Name = "Switch Statements"
                        },
                        new
                        {
                            Id = new Guid("ffada982-28e2-4f06-873b-438a04436e9c"),
                            CodeSmellCategoryId = new Guid("b31adc79-2529-46b7-8cd6-f36b570f3eb2"),
                            Description = "Temporary Fields are fields in a class that get their values only under certain circumstances and remain empty the rest of the time.",
                            Name = "Temporary Field"
                        },
                        new
                        {
                            Id = new Guid("5ef6b2f0-f9da-48d2-aa71-1fb84c906077"),
                            CodeSmellCategoryId = new Guid("b31adc79-2529-46b7-8cd6-f36b570f3eb2"),
                            Description = "Refused Bequest occurs when a subclass uses only some of the methods and properties inherited from its parent class.",
                            Name = "Refused Bequest"
                        },
                        new
                        {
                            Id = new Guid("67db1d7d-54aa-4d57-ab2b-73a240f5db8e"),
                            CodeSmellCategoryId = new Guid("b31adc79-2529-46b7-8cd6-f36b570f3eb2"),
                            Description = "Alternative Classes with Different Interfaces occur when two classes perform identical functions but have different method names.",
                            Name = "Alternative Classes with Different Interfaces"
                        },
                        new
                        {
                            Id = new Guid("92b3e939-87c3-4612-b811-5672fb00ff23"),
                            CodeSmellCategoryId = new Guid("01d42116-b553-462e-b9aa-0b6b7e93208e"),
                            Description = "Divergent Change occurs when you find yourself having to change many unrelated methods whenever you make changes to a class.",
                            Name = "Divergent Change"
                        },
                        new
                        {
                            Id = new Guid("0c7fe465-bc5a-4648-b7bc-bea4ddff6cc3"),
                            CodeSmellCategoryId = new Guid("01d42116-b553-462e-b9aa-0b6b7e93208e"),
                            Description = "Shotgun Surgery occurs when making any modification requires you to make many small changes to many different classes.",
                            Name = "Shotgun Surgery"
                        },
                        new
                        {
                            Id = new Guid("ce56377a-e8f2-491c-ac05-25cf221f7a69"),
                            CodeSmellCategoryId = new Guid("01d42116-b553-462e-b9aa-0b6b7e93208e"),
                            Description = "Parallel Inheritance Hierarchy occurs when creating a subclass for one class requires you to create a subclass for another class.",
                            Name = "Parallel Inheritance Hierarchies"
                        },
                        new
                        {
                            Id = new Guid("f752eaf3-0a56-49a0-8d1b-4da6bf88207b"),
                            CodeSmellCategoryId = new Guid("532dbdb3-f639-4468-a1ea-7bdc9b70e324"),
                            Description = "Comments in code are meant to explain what the code does, but they can also be a sign of underlying issues.",
                            Name = "Comments"
                        },
                        new
                        {
                            Id = new Guid("107c8f4b-8710-424d-bc89-66fd3ffe2391"),
                            CodeSmellCategoryId = new Guid("532dbdb3-f639-4468-a1ea-7bdc9b70e324"),
                            Description = "It's when two or more code fragments in your program are nearly or entirely the same.",
                            Name = "Duplicate Code"
                        },
                        new
                        {
                            Id = new Guid("f0b010f8-d557-426e-81bc-45b5b3c7edd8"),
                            CodeSmellCategoryId = new Guid("532dbdb3-f639-4468-a1ea-7bdc9b70e324"),
                            Description = "A Lazy Class is a class that doesn't do enough to justify its existence in your codebase.",
                            Name = "Lazy Class"
                        },
                        new
                        {
                            Id = new Guid("025ed894-3517-4750-96a1-62e800810e4c"),
                            CodeSmellCategoryId = new Guid("532dbdb3-f639-4468-a1ea-7bdc9b70e324"),
                            Description = "A Data Class is a class that contains only fields and crude methods for accessing them, such as getters and setters.",
                            Name = "Data Class"
                        },
                        new
                        {
                            Id = new Guid("7d7311e8-ceb2-4af9-a1ac-5d7d7e3100a3"),
                            CodeSmellCategoryId = new Guid("532dbdb3-f639-4468-a1ea-7bdc9b70e324"),
                            Description = "Dead Code refers to any variable, parameter, field, method, or class that is no longer used in your program.",
                            Name = "Dead Code"
                        },
                        new
                        {
                            Id = new Guid("2d656e05-e0da-4e64-87d4-83a2c26a519c"),
                            CodeSmellCategoryId = new Guid("532dbdb3-f639-4468-a1ea-7bdc9b70e324"),
                            Description = "Speculative Generality occurs when there’s an unused class, method, field, or parameter in your code.",
                            Name = "Speculative Generality"
                        },
                        new
                        {
                            Id = new Guid("f193f8e4-0101-4939-876b-623ff35802a7"),
                            CodeSmellCategoryId = new Guid("ac8b0083-cc48-4c42-8a8d-e4d72c57195a"),
                            Description = "It's a situation where a method in one class is overly interested in the data of another class, indicating that the method might belong in the other class.",
                            Name = "Feature Envy"
                        },
                        new
                        {
                            Id = new Guid("4f4dffc8-42fa-490e-b176-74a8c3712ff3"),
                            CodeSmellCategoryId = new Guid("ac8b0083-cc48-4c42-8a8d-e4d72c57195a"),
                            Description = "Inappropriate Intimacy occurs when one class uses the internal fields and methods of another class.",
                            Name = "Inappropriate Intimacy"
                        },
                        new
                        {
                            Id = new Guid("2856117b-e168-43dd-ab76-fb7d79345e85"),
                            CodeSmellCategoryId = new Guid("ac8b0083-cc48-4c42-8a8d-e4d72c57195a"),
                            Description = "A Message Chain occurs when you see a series of calls like $a->b()->c()->d() in your code.",
                            Name = "Message Chains"
                        },
                        new
                        {
                            Id = new Guid("919bbd42-daec-4caa-9a5e-d5e49525c5b7"),
                            CodeSmellCategoryId = new Guid("ac8b0083-cc48-4c42-8a8d-e4d72c57195a"),
                            Description = "It's a class that exists solely to pass messages to another class, without adding any real value itself.",
                            Name = "Middle Man"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmellCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CodeSmellCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d516c542-1618-4037-b944-1adb5bac39b9"),
                            Description = "Bloaters are code, methods, and classes that become excessively large and difficult to manage. These issues typically develop gradually as the program evolves, especially if no effort is made to address them.",
                            Name = "Bloaters"
                        },
                        new
                        {
                            Id = new Guid("b31adc79-2529-46b7-8cd6-f36b570f3eb2"),
                            Description = "All these code smells result from the incomplete or incorrect application of object-oriented programming principles.",
                            Name = "Object Orientation Abusers"
                        },
                        new
                        {
                            Id = new Guid("01d42116-b553-462e-b9aa-0b6b7e93208e"),
                            Description = "These code smells indicate that changing one part of the code requires multiple changes elsewhere, making program development more complex and costly.",
                            Name = "Change Preventers"
                        },
                        new
                        {
                            Id = new Guid("532dbdb3-f639-4468-a1ea-7bdc9b70e324"),
                            Description = "A dispensable is an unnecessary element whose removal would make the code cleaner, more efficient, and easier to understand.",
                            Name = "Dispensables"
                        },
                        new
                        {
                            Id = new Guid("ac8b0083-cc48-4c42-8a8d-e4d72c57195a"),
                            Description = "All the smells in this group contribute to excessive coupling between classes or result from replacing coupling with excessive delegation.",
                            Name = "Couplers"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.EducationalProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("EducationalProgress");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Flashcard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeSmellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadingContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodeSmellId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleVideos");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a15d0fc8-a99e-48a4-aed6-c12ecd6af2e2"),
                            IsRead = false,
                            Message = "This is your first notification",
                            SentTime = new DateTime(2024, 6, 12, 7, 49, 23, 782, DateTimeKind.Utc).AddTicks(5906),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        },
                        new
                        {
                            Id = new Guid("642f75f6-2ab7-4f2d-95ae-3b9f6aeed600"),
                            IsRead = true,
                            Message = "This is your second notification",
                            SentTime = new DateTime(2024, 6, 13, 7, 49, 23, 782, DateTimeKind.Utc).AddTicks(5919),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        },
                        new
                        {
                            Id = new Guid("c2ff895f-aaa3-4de6-a027-80a68fc13f4b"),
                            IsRead = false,
                            Message = "This is your first notification",
                            SentTime = new DateTime(2024, 6, 11, 7, 49, 23, 782, DateTimeKind.Utc).AddTicks(5921),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeSnippet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionImages");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuestionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId1");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.RefactoringTechnique", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefactoringTechniques");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ReportIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscussionItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReportIssues");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ResponseComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("ResponseComments");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.UserProfileImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("UserProfileImages");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("CodeSmellQuestion", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "QuestionListId");

                    b.HasIndex("QuestionListId");

                    b.ToTable("CodeSmellQuestion");
                });

            modelBuilder.Entity("CodeSmellQuestionResponse", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "ResponseListId");

                    b.HasIndex("ResponseListId");

                    b.ToTable("CodeSmellQuestionResponse");
                });

            modelBuilder.Entity("CodeSmellRefactoringTechnique", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefactoringTechniqueListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "RefactoringTechniqueListId");

                    b.HasIndex("RefactoringTechniqueListId");

                    b.ToTable("CodeSmellRefactoringTechnique");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80abfbab-92b8-454d-b82b-50b4a1568ec2",
                            ConcurrencyStamp = "80abfbab-92b8-454d-b82b-50b4a1568ec2",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033",
                            ConcurrencyStamp = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033",
                            Name = "Moderator",
                            NormalizedName = "Moderator"
                        },
                        new
                        {
                            Id = "06b0066a-4de5-412e-9d62-0dda4d0cc709",
                            ConcurrencyStamp = "06b0066a-4de5-412e-9d62-0dda4d0cc709",
                            Name = "Developer",
                            NormalizedName = "Developer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0bb96526-4ffd-4846-8e00-ac29d53671d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa66c499-5cfb-4063-99f0-08ebc6451ea7",
                            Email = "admin@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COSMELLREFINE.COM",
                            NormalizedUserName = "ADMIN@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPFHRW7mXy4fmzfyK1xVXbhhXnDEac2oyYg+v+jI7xZQevFLBfJ8UUlhgziah5+xDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ebab0bfa-9508-402f-a006-e2d04b816d21",
                            TwoFactorEnabled = false,
                            UserName = "admin@cosmellrefine.com"
                        },
                        new
                        {
                            Id = "9411a478-8335-4360-9a4c-9640eb2e18cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51b872bc-d742-4987-a2b9-b1df74d25ab6",
                            Email = "moderator@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@COSMELLREFINE.COM",
                            NormalizedUserName = "MODERATOR@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEl9sf/JxoRisKFM2uOR7+ONj3rrQ1ygnvV/u6yJweqdwUQgvIXAuxv/cMw7IMb5nA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d1b566d-77f6-43fe-a5b7-4e70803dc076",
                            TwoFactorEnabled = false,
                            UserName = "moderator@cosmellrefine.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0",
                            RoleId = "80abfbab-92b8-454d-b82b-50b4a1568ec2"
                        },
                        new
                        {
                            UserId = "9411a478-8335-4360-9a4c-9640eb2e18cd",
                            RoleId = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuestionRefactoringTechnique", b =>
                {
                    b.Property<Guid>("QuestionListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefactoringTechniquesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionListId", "RefactoringTechniquesId");

                    b.HasIndex("RefactoringTechniquesId");

                    b.ToTable("QuestionRefactoringTechnique");
                });

            modelBuilder.Entity("QuestionResponseRefactoringTechnique", b =>
                {
                    b.Property<Guid>("RefactoringTechniquesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefactoringTechniquesId", "ResponseListId");

                    b.HasIndex("ResponseListId");

                    b.ToTable("QuestionResponseRefactoringTechnique");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmell", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmellCategory", "CodeSmellCategory")
                        .WithMany()
                        .HasForeignKey("CodeSmellCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmellCategory");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.EducationalProgress", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "CurrentModule")
                        .WithMany()
                        .HasForeignKey("CurrentModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentModule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Flashcard", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Flashcards")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", "CodeSmell")
                        .WithMany()
                        .HasForeignKey("CodeSmellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmell");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleVideo", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Videos")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Notification", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionImage", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", "Question")
                        .WithMany("Images")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId1");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Quiz", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Quizzes")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ReportIssue", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ResponseComment", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.UserProfileImage", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Vote", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", "Response")
                        .WithMany("Votes")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeSmellQuestion", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSmellQuestionResponse", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", null)
                        .WithMany()
                        .HasForeignKey("ResponseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSmellRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniqueListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionResponseRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", null)
                        .WithMany()
                        .HasForeignKey("ResponseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.Navigation("Flashcards");

                    b.Navigation("Quizzes");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}

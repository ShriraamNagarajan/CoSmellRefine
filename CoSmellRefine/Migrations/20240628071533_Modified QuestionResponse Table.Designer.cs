// <auto-generated />
using System;
using CoSmellRefine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoSmellRefine.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240628071533_Modified QuestionResponse Table")]
    partial class ModifiedQuestionResponseTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeSmellCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodeSmellCategoryId");

                    b.ToTable("CodeSmells");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a4ab2d1-09f4-4388-8754-6ee627ce1b5e"),
                            CodeSmellCategoryId = new Guid("9c37b76d-d3e7-476b-9a60-c167f3618d49"),
                            Description = "A Long Method is a method that contains too many lines of code.",
                            Name = "Long Method"
                        },
                        new
                        {
                            Id = new Guid("ce602344-eafd-4dd1-b52e-878b7eefbce8"),
                            CodeSmellCategoryId = new Guid("9c37b76d-d3e7-476b-9a60-c167f3618d49"),
                            Description = "A Large Class is a class that contains too many fields, methods, or lines of code.",
                            Name = "Large Class"
                        },
                        new
                        {
                            Id = new Guid("414774eb-8236-49ba-bf30-e6f7a0b89edb"),
                            CodeSmellCategoryId = new Guid("9c37b76d-d3e7-476b-9a60-c167f3618d49"),
                            Description = "Primitive Obsession occurs when you use primitive data types for tasks that could be better handled by small objects.",
                            Name = "Primitive Obsession"
                        },
                        new
                        {
                            Id = new Guid("29b1e6bf-dd7b-4177-80b0-fe6b0966f232"),
                            CodeSmellCategoryId = new Guid("9c37b76d-d3e7-476b-9a60-c167f3618d49"),
                            Description = "A Long Parameter List occurs when a method has more than three or four parameters.",
                            Name = "Long Parameter List"
                        },
                        new
                        {
                            Id = new Guid("eeb3097c-1fe9-4e17-8d7b-4438787b2f2d"),
                            CodeSmellCategoryId = new Guid("9c37b76d-d3e7-476b-9a60-c167f3618d49"),
                            Description = "Data Clumps occur when identical groups of variables appear in different parts of the code.",
                            Name = "Data Clumps"
                        },
                        new
                        {
                            Id = new Guid("511c614f-3cad-4c4c-872d-9b44d4ee4384"),
                            CodeSmellCategoryId = new Guid("24426aca-b747-4915-a561-2e05090c6d6e"),
                            Description = "Switch Statements are defined by the presence of a complex switch operator or a sequence of if statements.",
                            Name = "Switch Statements"
                        },
                        new
                        {
                            Id = new Guid("00d8c1e7-cce7-4690-8c96-4a6051c9ce71"),
                            CodeSmellCategoryId = new Guid("24426aca-b747-4915-a561-2e05090c6d6e"),
                            Description = "Temporary Fields are fields in a class that get their values only under certain circumstances and remain empty the rest of the time.",
                            Name = "Temporary Field"
                        },
                        new
                        {
                            Id = new Guid("97dfd496-b438-44af-9515-c4679cfd72a2"),
                            CodeSmellCategoryId = new Guid("24426aca-b747-4915-a561-2e05090c6d6e"),
                            Description = "Refused Bequest occurs when a subclass uses only some of the methods and properties inherited from its parent class.",
                            Name = "Refused Bequest"
                        },
                        new
                        {
                            Id = new Guid("60731cec-9492-404f-8ecd-64b0a555ae65"),
                            CodeSmellCategoryId = new Guid("24426aca-b747-4915-a561-2e05090c6d6e"),
                            Description = "Alternative Classes with Different Interfaces occur when two classes perform identical functions but have different method names.",
                            Name = "Alternative Classes with Different Interfaces"
                        },
                        new
                        {
                            Id = new Guid("68ce32ae-88f2-41d2-827d-bb1e1f912aee"),
                            CodeSmellCategoryId = new Guid("91a8b163-a434-41d5-83be-08121482b66e"),
                            Description = "Divergent Change occurs when you find yourself having to change many unrelated methods whenever you make changes to a class.",
                            Name = "Divergent Change"
                        },
                        new
                        {
                            Id = new Guid("8b1ceccc-fe12-4e3a-a145-986b29d951cc"),
                            CodeSmellCategoryId = new Guid("91a8b163-a434-41d5-83be-08121482b66e"),
                            Description = "Shotgun Surgery occurs when making any modification requires you to make many small changes to many different classes.",
                            Name = "Shotgun Surgery"
                        },
                        new
                        {
                            Id = new Guid("275fea78-2c91-4c25-a5f7-9ed038660ff7"),
                            CodeSmellCategoryId = new Guid("91a8b163-a434-41d5-83be-08121482b66e"),
                            Description = "Parallel Inheritance Hierarchy occurs when creating a subclass for one class requires you to create a subclass for another class.",
                            Name = "Parallel Inheritance Hierarchies"
                        },
                        new
                        {
                            Id = new Guid("9052108c-0571-4956-8943-195b4633d2b3"),
                            CodeSmellCategoryId = new Guid("be8c8f13-a6a3-4589-984b-8e709e1fb5df"),
                            Description = "Comments in code are meant to explain what the code does, but they can also be a sign of underlying issues.",
                            Name = "Comments"
                        },
                        new
                        {
                            Id = new Guid("750da832-b5ce-41a6-b1a9-d88e5e5b214b"),
                            CodeSmellCategoryId = new Guid("be8c8f13-a6a3-4589-984b-8e709e1fb5df"),
                            Description = "It's when two or more code fragments in your program are nearly or entirely the same.",
                            Name = "Duplicate Code"
                        },
                        new
                        {
                            Id = new Guid("42dd99d5-9a0e-4dee-999b-e70bbcc15b0a"),
                            CodeSmellCategoryId = new Guid("be8c8f13-a6a3-4589-984b-8e709e1fb5df"),
                            Description = "A Lazy Class is a class that doesn't do enough to justify its existence in your codebase.",
                            Name = "Lazy Class"
                        },
                        new
                        {
                            Id = new Guid("618947af-ce54-4d66-8c15-3c67fa63d3ef"),
                            CodeSmellCategoryId = new Guid("be8c8f13-a6a3-4589-984b-8e709e1fb5df"),
                            Description = "A Data Class is a class that contains only fields and crude methods for accessing them, such as getters and setters.",
                            Name = "Data Class"
                        },
                        new
                        {
                            Id = new Guid("56dd4b0f-2f61-415c-815b-d5a4b232bb4d"),
                            CodeSmellCategoryId = new Guid("be8c8f13-a6a3-4589-984b-8e709e1fb5df"),
                            Description = "Dead Code refers to any variable, parameter, field, method, or class that is no longer used in your program.",
                            Name = "Dead Code"
                        },
                        new
                        {
                            Id = new Guid("8302ce0b-3327-49fb-b503-59b27fd21b79"),
                            CodeSmellCategoryId = new Guid("be8c8f13-a6a3-4589-984b-8e709e1fb5df"),
                            Description = "Speculative Generality occurs when there’s an unused class, method, field, or parameter in your code.",
                            Name = "Speculative Generality"
                        },
                        new
                        {
                            Id = new Guid("85de4761-3f3e-42b5-a012-25fd6e553745"),
                            CodeSmellCategoryId = new Guid("a1a825a0-901f-4615-8e18-78367d2448fa"),
                            Description = "It's a situation where a method in one class is overly interested in the data of another class, indicating that the method might belong in the other class.",
                            Name = "Feature Envy"
                        },
                        new
                        {
                            Id = new Guid("63f82595-340c-41f7-a804-a11e3a60bf6e"),
                            CodeSmellCategoryId = new Guid("a1a825a0-901f-4615-8e18-78367d2448fa"),
                            Description = "Inappropriate Intimacy occurs when one class uses the internal fields and methods of another class.",
                            Name = "Inappropriate Intimacy"
                        },
                        new
                        {
                            Id = new Guid("62b91c50-aa6c-497e-87ec-bf6efa7bbc19"),
                            CodeSmellCategoryId = new Guid("a1a825a0-901f-4615-8e18-78367d2448fa"),
                            Description = "A Message Chain occurs when you see a series of calls like $a->b()->c()->d() in your code.",
                            Name = "Message Chains"
                        },
                        new
                        {
                            Id = new Guid("e0dcf502-9b15-4a76-8d4f-d53a7d7125d3"),
                            CodeSmellCategoryId = new Guid("a1a825a0-901f-4615-8e18-78367d2448fa"),
                            Description = "It's a class that exists solely to pass messages to another class, without adding any real value itself.",
                            Name = "Middle Man"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmellCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CodeSmellCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c37b76d-d3e7-476b-9a60-c167f3618d49"),
                            Description = "Bloaters are code, methods, and classes that become excessively large and difficult to manage. These issues typically develop gradually as the program evolves, especially if no effort is made to address them.",
                            ImageUrl = "https://finance-blog-post.s3.amazonaws.com/bloaters.png",
                            Name = "Bloaters"
                        },
                        new
                        {
                            Id = new Guid("24426aca-b747-4915-a561-2e05090c6d6e"),
                            Description = "All these code smells result from the incomplete or incorrect application of object-oriented programming principles.",
                            ImageUrl = "https://finance-blog-post.s3.amazonaws.com/object_orientation_abusers.png",
                            Name = "Object Orientation Abusers"
                        },
                        new
                        {
                            Id = new Guid("91a8b163-a434-41d5-83be-08121482b66e"),
                            Description = "These code smells indicate that changing one part of the code requires multiple changes elsewhere, making program development more complex and costly.",
                            ImageUrl = "https://finance-blog-post.s3.amazonaws.com/change_preventers.png",
                            Name = "Change Preventers"
                        },
                        new
                        {
                            Id = new Guid("be8c8f13-a6a3-4589-984b-8e709e1fb5df"),
                            Description = "A dispensable is an unnecessary element whose removal would make the code cleaner, more efficient, and easier to understand.",
                            ImageUrl = "https://finance-blog-post.s3.amazonaws.com/dispensables.png",
                            Name = "Dispensables"
                        },
                        new
                        {
                            Id = new Guid("a1a825a0-901f-4615-8e18-78367d2448fa"),
                            Description = "All the smells in this group contribute to excessive coupling between classes or result from replacing coupling with excessive delegation.",
                            ImageUrl = "https://finance-blog-post.s3.amazonaws.com/couplers.png",
                            Name = "Couplers"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Flashcard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CodeSmellCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeSmellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadingContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodeSmellCategoryId");

                    b.HasIndex("CodeSmellId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleCompletion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("ModuleCompletion");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleVideos");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f001d9b6-8293-4a63-bc32-ed8c8dc94e0d"),
                            IsRead = false,
                            Message = "This is your first notification",
                            SentTime = new DateTime(2024, 6, 26, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(502),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        },
                        new
                        {
                            Id = new Guid("55b68b3a-c98e-4814-9c32-48b2dfa37b5d"),
                            IsRead = true,
                            Message = "This is your second notification",
                            SentTime = new DateTime(2024, 6, 27, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(514),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        },
                        new
                        {
                            Id = new Guid("7fe86c8b-f2fb-414c-a09a-86912886aa2b"),
                            IsRead = false,
                            Message = "This is your first notification",
                            SentTime = new DateTime(2024, 6, 25, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(516),
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeSnippet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61c606af-95a6-4afa-9f4e-a202d0a64a72"),
                            Body = "Body of question 1",
                            CodeSnippet = "CodeSnippet1",
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 6, 28, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(534),
                            PostedDate = new DateTime(2024, 6, 28, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(533),
                            Status = "Closed",
                            Title = "Question 1",
                            Type = "Code Smell Identification",
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        },
                        new
                        {
                            Id = new Guid("0a38e6b2-8103-4703-9653-b3e4a7e9cd9f"),
                            Body = "Body of question 2",
                            CodeSnippet = "CodeSnippet2",
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 6, 28, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(539),
                            PostedDate = new DateTime(2024, 6, 27, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(539),
                            Status = "Open",
                            Title = "Question 2",
                            Type = "Refactoring Technique Identification",
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionImages");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeSnippet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuestionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId1");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08e92f41-113c-40b5-9e9f-bca311e29431"),
                            Body = "Response to question 1",
                            CodeSnippet = "Console.WriteLine(\"Hello World\");",
                            IsDeleted = false,
                            PostedDate = new DateTime(2024, 6, 28, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(581),
                            QuestionId = new Guid("61c606af-95a6-4afa-9f4e-a202d0a64a72"),
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        },
                        new
                        {
                            Id = new Guid("9f79c66d-54b5-496c-9b58-15dc8e8528f6"),
                            Body = "Another response to question 1",
                            CodeSnippet = "Console.WriteLine(\"Hello World\");",
                            IsDeleted = false,
                            PostedDate = new DateTime(2024, 6, 28, 6, 45, 32, 972, DateTimeKind.Utc).AddTicks(587),
                            QuestionId = new Guid("0a38e6b2-8103-4703-9653-b3e4a7e9cd9f"),
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuizResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.RefactoringTechnique", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefactoringTechniques");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e34fc05e-69ef-4ed1-864b-fe3120484216"),
                            Description = "Move a method to another class if it clearly belongs there.",
                            Name = "Move Method"
                        },
                        new
                        {
                            Id = new Guid("7daedb76-a49c-4792-a02c-bcbd0594afd2"),
                            Description = "Extract part of a method into a separate method and move it to the appropriate class.",
                            Name = "Extract Method"
                        },
                        new
                        {
                            Id = new Guid("2abeb85f-5c5e-4dc3-bb05-359da6cfeae8"),
                            Description = "Hide public fields from direct access by using getters and setters.",
                            Name = "Encapsulate Field"
                        },
                        new
                        {
                            Id = new Guid("53b3e61e-08ff-409c-9805-9fe86ef306a1"),
                            Description = "Use assertions to make rules about a necessary state explicit in the code.",
                            Name = "Introduce Assertion"
                        },
                        new
                        {
                            Id = new Guid("64d6b2c3-4a0c-4ffd-b87f-58a461c97606"),
                            Description = "Move methods and data into a new class to isolate changes to specific parts of the system.",
                            Name = "Extract Class"
                        },
                        new
                        {
                            Id = new Guid("7218f03e-b0fd-459a-8258-39f82c5d9d7d"),
                            Description = "Replace type code with subclassing or state/strategy patterns.",
                            Name = "Replace Type Code with Subclass"
                        },
                        new
                        {
                            Id = new Guid("169cc71d-297d-412d-97eb-6ddd844a90d1"),
                            Description = "Use polymorphism to replace the switch statement.",
                            Name = "Replace Conditional with Polymorphism"
                        },
                        new
                        {
                            Id = new Guid("f7a7e663-3c24-48ba-bb11-c865397f46a9"),
                            Description = "Use the Null Object pattern to handle default or missing cases in a switch statement.",
                            Name = "Introduce Null Object"
                        },
                        new
                        {
                            Id = new Guid("66de5e0c-91be-4983-ae3c-628e62378fc7"),
                            Description = "Move parts of one class to the class where they are used, but only if the first class truly doesn't need them.",
                            Name = "Move Field"
                        },
                        new
                        {
                            Id = new Guid("e2ec1973-c21a-4020-bf43-7f33de5cda52"),
                            Description = "Merge a subclass into its parent class to simplify the hierarchy.",
                            Name = "Collapse Hierarchy"
                        },
                        new
                        {
                            Id = new Guid("f4cd659b-1842-4adf-a9b6-daf27fbf4672"),
                            Description = "Merge the components of a near-useless class into another class and remove the empty class.",
                            Name = "Inline Class"
                        },
                        new
                        {
                            Id = new Guid("6a3fbf51-16c0-4ad0-87e8-c339312da0a3"),
                            Description = "Simplify methods by removing unneeded parameters.",
                            Name = "Remove Parameter"
                        },
                        new
                        {
                            Id = new Guid("ca862571-a0a3-4be3-9010-f372743635f2"),
                            Description = "Use the Template Method pattern if the same code is found in two subclasses at the same level but isn't completely identical.",
                            Name = "Form Template Method"
                        },
                        new
                        {
                            Id = new Guid("3088ddf2-48f7-4411-bcb3-0e64372d67bf"),
                            Description = "Choose the best algorithm and replace others with it if two methods do the same thing but use different algorithms.",
                            Name = "Substitute Algorithm"
                        },
                        new
                        {
                            Id = new Guid("a6a54b81-199e-450e-a430-7d1447c574aa"),
                            Description = "Merge multiple conditional expressions performing the same code into a single condition and extract the common code into a new method.",
                            Name = "Consolidate Conditional Expression"
                        },
                        new
                        {
                            Id = new Guid("ba15f373-31a3-480e-91ee-ac5c7974a94c"),
                            Description = "Move common code outside of the conditional expression if it is performed in all branches.",
                            Name = "Consolidate Duplicate Conditional Fragments"
                        },
                        new
                        {
                            Id = new Guid("ee12a9e5-3b2d-49e1-87b2-c1fada2831e0"),
                            Description = "Simplify client code by hiding the message chain, providing a single method that handles the entire chain.",
                            Name = "Hide Delegate"
                        },
                        new
                        {
                            Id = new Guid("8191f1cc-d01f-470c-8c46-d1d6303f1d07"),
                            Description = "Reduce dependency by changing mutually interdependent classes to unidirectional relationships.",
                            Name = "Change Bidirectional Association to Unidirectional"
                        },
                        new
                        {
                            Id = new Guid("136e97b3-6d1e-4dc5-9b2c-916a2a448e14"),
                            Description = "Use inheritance to formalize the relationship if the intimacy is between a subclass and its superclass.",
                            Name = "Replace Delegation with Inheritance"
                        },
                        new
                        {
                            Id = new Guid("67f191cb-a7a5-40c2-b269-6848eb22e434"),
                            Description = "Add methods externally to a library class to provide the needed functionality without modifying the original class.",
                            Name = "Introduce Foreign Method"
                        },
                        new
                        {
                            Id = new Guid("2d92ebe4-8259-40c0-a8ed-cc3922b361bb"),
                            Description = "Create a local extension of the library class to extend and modify it to meet your needs while keeping the original library intact.",
                            Name = "Introduce Local Extension"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ReportIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscussionItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiscussionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReportIssues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("755c67e9-0b7f-48d7-b164-75c75ae93922"),
                            DiscussionItemId = new Guid("61c606af-95a6-4afa-9f4e-a202d0a64a72"),
                            DiscussionType = "Question",
                            Reason = "Inappropriate content",
                            ReportDate = new DateTime(2024, 6, 28, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(761),
                            Status = "In Review",
                            StatusReason = "None",
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        },
                        new
                        {
                            Id = new Guid("4c740216-4b6e-46bf-8ab3-756125a114f4"),
                            DiscussionItemId = new Guid("0a38e6b2-8103-4703-9653-b3e4a7e9cd9f"),
                            DiscussionType = "Response",
                            Reason = "Spam",
                            ReportDate = new DateTime(2024, 6, 28, 5, 15, 32, 972, DateTimeKind.Utc).AddTicks(763),
                            Status = "No Action Needed",
                            StatusReason = "The content is appropriate",
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        },
                        new
                        {
                            Id = new Guid("81faa546-4e4c-453d-a614-5a149cce6dc1"),
                            DiscussionItemId = new Guid("0a38e6b2-8103-4703-9653-b3e4a7e9cd9f"),
                            DiscussionType = "Question",
                            Reason = "Duplicate content",
                            ReportDate = new DateTime(2024, 6, 28, 6, 15, 32, 972, DateTimeKind.Utc).AddTicks(766),
                            Status = "Warned User",
                            StatusReason = "User comment is inappropriate",
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260"
                        });
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ResponseComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("ResponseComments");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.UserProfileImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("UserProfileImages");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cf08bbd-141e-49c5-97cf-eb357f1e536a"),
                            IsUpvote = true,
                            ResponseId = new Guid("08e92f41-113c-40b5-9e9f-bca311e29431"),
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260",
                            VoteDate = new DateTime(2024, 6, 28, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(736)
                        },
                        new
                        {
                            Id = new Guid("049818f4-fcaf-400f-a42f-a2db9a3718ed"),
                            IsUpvote = false,
                            ResponseId = new Guid("08e92f41-113c-40b5-9e9f-bca311e29431"),
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260",
                            VoteDate = new DateTime(2024, 6, 28, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(738)
                        },
                        new
                        {
                            Id = new Guid("0d5a3705-3b07-4887-b5f0-45292d95c66b"),
                            IsUpvote = true,
                            ResponseId = new Guid("9f79c66d-54b5-496c-9b58-15dc8e8528f6"),
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260",
                            VoteDate = new DateTime(2024, 6, 28, 7, 15, 32, 972, DateTimeKind.Utc).AddTicks(740)
                        });
                });

            modelBuilder.Entity("CodeSmellQuestion", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "QuestionListId");

                    b.HasIndex("QuestionListId");

                    b.ToTable("CodeSmellQuestion");
                });

            modelBuilder.Entity("CodeSmellQuestionResponse", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "ResponseListId");

                    b.HasIndex("ResponseListId");

                    b.ToTable("CodeSmellQuestionResponse");
                });

            modelBuilder.Entity("CodeSmellRefactoringTechnique", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefactoringTechniqueListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "RefactoringTechniqueListId");

                    b.HasIndex("RefactoringTechniqueListId");

                    b.ToTable("CodeSmellRefactoringTechnique");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80abfbab-92b8-454d-b82b-50b4a1568ec2",
                            ConcurrencyStamp = "80abfbab-92b8-454d-b82b-50b4a1568ec2",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033",
                            ConcurrencyStamp = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033",
                            Name = "Moderator",
                            NormalizedName = "Moderator"
                        },
                        new
                        {
                            Id = "06b0066a-4de5-412e-9d62-0dda4d0cc709",
                            ConcurrencyStamp = "06b0066a-4de5-412e-9d62-0dda4d0cc709",
                            Name = "Developer",
                            NormalizedName = "Developer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0bb96526-4ffd-4846-8e00-ac29d53671d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8a0137c-1329-4b1d-b3e5-7f8cd013f51c",
                            Email = "admin@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COSMELLREFINE.COM",
                            NormalizedUserName = "ADMIN@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECKDynbvEM6JUN1wEiYI7maXgLiX+LcoLn7sP9uT/2tiVC6UJscEiJ/k57Mb4vltMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbc5dd6f-78eb-4dd0-9571-7065344e674b",
                            TwoFactorEnabled = false,
                            UserName = "admin@cosmellrefine.com"
                        },
                        new
                        {
                            Id = "9411a478-8335-4360-9a4c-9640eb2e18cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26b07bd3-789b-4e69-a787-0b2a02c81693",
                            Email = "moderator@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@COSMELLREFINE.COM",
                            NormalizedUserName = "MODERATOR@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFtFYAL+BXQ1BEuxjaFT8AtQ5CV2ahfZ4fjDIncY9fIUQpC+9477eFKV92osXjUtaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fea9f2e9-b8e4-4a32-b9ad-36162d8150b7",
                            TwoFactorEnabled = false,
                            UserName = "moderator@cosmellrefine.com"
                        },
                        new
                        {
                            Id = "680a7849-11d6-44d1-8ec5-fdac6ca72260",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "912b22b9-9e81-4451-9ac0-95982ec43906",
                            Email = "developer@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEVELOPER@COSMELLREFINE.COM",
                            NormalizedUserName = "DEVELOPER@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGV9dmMnJjGAVbClsm+TaeqpDqgoR7zFY53Jny531OtUif/HNwKFEhO75RagX2caWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2cc18f23-90fe-44e2-9bf2-13094ca882ab",
                            TwoFactorEnabled = false,
                            UserName = "developer@cosmellrefine.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0",
                            RoleId = "80abfbab-92b8-454d-b82b-50b4a1568ec2"
                        },
                        new
                        {
                            UserId = "9411a478-8335-4360-9a4c-9640eb2e18cd",
                            RoleId = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033"
                        },
                        new
                        {
                            UserId = "680a7849-11d6-44d1-8ec5-fdac6ca72260",
                            RoleId = "06b0066a-4de5-412e-9d62-0dda4d0cc709"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuestionRefactoringTechnique", b =>
                {
                    b.Property<Guid>("QuestionListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefactoringTechniquesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionListId", "RefactoringTechniquesId");

                    b.HasIndex("RefactoringTechniquesId");

                    b.ToTable("QuestionRefactoringTechnique");
                });

            modelBuilder.Entity("QuestionResponseRefactoringTechnique", b =>
                {
                    b.Property<Guid>("RefactoringTechniquesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefactoringTechniquesId", "ResponseListId");

                    b.HasIndex("ResponseListId");

                    b.ToTable("QuestionResponseRefactoringTechnique");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmell", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmellCategory", "CodeSmellCategory")
                        .WithMany()
                        .HasForeignKey("CodeSmellCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmellCategory");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Flashcard", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Flashcards")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmellCategory", "CodeSmellCategory")
                        .WithMany("Modules")
                        .HasForeignKey("CodeSmellCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", "CodeSmell")
                        .WithMany()
                        .HasForeignKey("CodeSmellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmell");

                    b.Navigation("CodeSmellCategory");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleCompletion", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleVideo", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Videos")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Notification", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionImage", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", "Question")
                        .WithMany("Images")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId1");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Quiz", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Quizzes")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuizResults", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ReportIssue", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ResponseComment", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.UserProfileImage", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Vote", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", "Response")
                        .WithMany("Votes")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeSmellQuestion", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSmellQuestionResponse", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", null)
                        .WithMany()
                        .HasForeignKey("ResponseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSmellRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniqueListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionResponseRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", null)
                        .WithMany()
                        .HasForeignKey("ResponseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmellCategory", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.Navigation("Flashcards");

                    b.Navigation("Quizzes");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using CoSmellRefine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoSmellRefine.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240609090632_Add Tables")]
    partial class AddTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeSmellCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodeSmellCategoryId");

                    b.ToTable("CodeSmells");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmellCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CodeSmellCategories");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.EducationalProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("EducationalProgress");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeSmellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadingContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodeSmellId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleVideos");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeSnippet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionImages");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QuestionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId1");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.RefactoringTechnique", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefactoringTechniques");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ReportIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscussionItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReportIssues");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ResponseComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("ResponseComments");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("CodeSmellQuestion", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "QuestionListId");

                    b.HasIndex("QuestionListId");

                    b.ToTable("CodeSmellQuestion");
                });

            modelBuilder.Entity("CodeSmellQuestionResponse", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "ResponseListId");

                    b.HasIndex("ResponseListId");

                    b.ToTable("CodeSmellQuestionResponse");
                });

            modelBuilder.Entity("CodeSmellRefactoringTechnique", b =>
                {
                    b.Property<Guid>("CodeSmellListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefactoringTechniqueListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodeSmellListId", "RefactoringTechniqueListId");

                    b.HasIndex("RefactoringTechniqueListId");

                    b.ToTable("CodeSmellRefactoringTechnique");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80abfbab-92b8-454d-b82b-50b4a1568ec2",
                            ConcurrencyStamp = "80abfbab-92b8-454d-b82b-50b4a1568ec2",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033",
                            ConcurrencyStamp = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033",
                            Name = "Moderator",
                            NormalizedName = "Moderator"
                        },
                        new
                        {
                            Id = "06b0066a-4de5-412e-9d62-0dda4d0cc709",
                            ConcurrencyStamp = "06b0066a-4de5-412e-9d62-0dda4d0cc709",
                            Name = "Developer",
                            NormalizedName = "Developer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0bb96526-4ffd-4846-8e00-ac29d53671d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "230bd48b-b48c-4a6a-a027-6854573aafa1",
                            Email = "admin@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COSMELLREFINE.COM",
                            NormalizedUserName = "ADMIN@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAcGqqNdW4dy77UNINWU2WJy/11Iewd77U/KP7sNb7yoTctVEQgx8MkE/pH3pU99GA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a8981f5-92b3-42d8-92d8-1d00c55a50f0",
                            TwoFactorEnabled = false,
                            UserName = "admin@cosmellrefine.com"
                        },
                        new
                        {
                            Id = "9411a478-8335-4360-9a4c-9640eb2e18cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de3df656-9665-4d27-b886-98d0f351d9be",
                            Email = "moderator@cosmellrefine.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@COSMELLREFINE.COM",
                            NormalizedUserName = "MODERATOR@COSMELLREFINE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGzn2ewtD21tvp4lS7rhnXOcoRG2OWziYiGkek8HHwO89gv1hwcub0flVBovJjbYaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b0c8a0a-c483-4b66-98e3-327dd2960e9a",
                            TwoFactorEnabled = false,
                            UserName = "moderator@cosmellrefine.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0bb96526-4ffd-4846-8e00-ac29d53671d0",
                            RoleId = "80abfbab-92b8-454d-b82b-50b4a1568ec2"
                        },
                        new
                        {
                            UserId = "9411a478-8335-4360-9a4c-9640eb2e18cd",
                            RoleId = "5f74cbd8-bd98-46d9-9760-bdad0ec7c033"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuestionRefactoringTechnique", b =>
                {
                    b.Property<Guid>("QuestionListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefactoringTechniquesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionListId", "RefactoringTechniquesId");

                    b.HasIndex("RefactoringTechniquesId");

                    b.ToTable("QuestionRefactoringTechnique");
                });

            modelBuilder.Entity("QuestionResponseRefactoringTechnique", b =>
                {
                    b.Property<Guid>("RefactoringTechniquesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponseListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefactoringTechniquesId", "ResponseListId");

                    b.HasIndex("ResponseListId");

                    b.ToTable("QuestionResponseRefactoringTechnique");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.CodeSmell", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmellCategory", "CodeSmellCategory")
                        .WithMany()
                        .HasForeignKey("CodeSmellCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmellCategory");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.EducationalProgress", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "CurrentModule")
                        .WithMany()
                        .HasForeignKey("CurrentModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentModule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", "CodeSmell")
                        .WithMany()
                        .HasForeignKey("CodeSmellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeSmell");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ModuleVideo", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Module", "Module")
                        .WithMany("Videos")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Notification", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionImage", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", "Question")
                        .WithMany("Images")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId1");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ReportIssue", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.ResponseComment", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Vote", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", "Response")
                        .WithMany("Votes")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeSmellQuestion", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSmellQuestionResponse", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", null)
                        .WithMany()
                        .HasForeignKey("ResponseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSmellRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.CodeSmell", null)
                        .WithMany()
                        .HasForeignKey("CodeSmellListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniqueListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionResponseRefactoringTechnique", b =>
                {
                    b.HasOne("CoSmellRefine.Models.Domain.RefactoringTechnique", null)
                        .WithMany()
                        .HasForeignKey("RefactoringTechniquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoSmellRefine.Models.Domain.QuestionResponse", null)
                        .WithMany()
                        .HasForeignKey("ResponseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Module", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.Question", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("CoSmellRefine.Models.Domain.QuestionResponse", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}

@model CoSmellRefine.Models.ViewModels.AdminDashboardViewModel

@{
    Layout = "~/Views/Shared/_UserLayout.cshtml";
    ViewData["Title"] = "CoSmellRefine";
}

        <p class="h1 mb-4">Welcome back, Admin!!!</p>
        <div class="row mb-3">
            <div class="col-12 col-md-5 mb-4 mt-3">
                <p class="h3">Users</p>
                <div class="row dashboard-content-container h-100">
                    <div class="col-6 d-flex justify-content-center align-items-center flex-column">
                        <p class="content-header">Total Users</p>
                        <p class="content-description">@Model.TotalUsers</p>
                    </div>
                    <div class="col-6 d-flex justify-content-center align-items-center flex-column">
                        <p class="content-header">Total Questions Posted</p>
                        <p class="content-description">@Model.TotalQuestionsPosted</p>
                    </div>
                    <div class="row">
                        <div class="col-12 d-flex justify-content-center align-items-center">
                            <a asp-controller="AdminUsers" asp-action="List" class="btn light-btn" data-tilt data-tilt-scale="1.1">Manage</a>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-12 col-md-5 offset-0 offset-md-1 mb-4 mt-3">
                <p class="h3">Modules</p>
                <div class="row dashboard-content-container h-100">
                    <div class="col-6 d-flex justify-content-center align-items-center flex-column">
                        <p class="content-header">Total Modules</p>
                        <p class="content-description">@Model.TotalModules</p>
                    </div>
                    <div class="col-6 d-flex justify-content-center align-items-center flex-column">
                        <p class="content-header">Recently Updated Module</p>
                        <p class="content-description">@Model.RecentlyUpdatedModule</p>
                    </div>
                    <div class="row">
                        <div class="col-12 d-flex justify-content-center align-items-center">
                            <a asp-controller="AdminContent" asp-action="List" class="btn light-btn" data-tilt data-tilt-scale="1.1">Manage</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-5">

            <div class="col-12 col-md-5">
                <p class="h3">Average Quiz Results</p>
                <canvas id="quizResultsChart" class="dashboard-content-container p-2"></canvas>
            </div>
            <div class="col-12 col-md-5 offset-0 offset-md-1">
                <p class="h3">Top Contributors</p>
                <canvas id="contributorsChart" class="dashboard-content-container p-2"></canvas>
            </div>
        </div>

        <div class="row mt-5">
            <div class="col-12 col-md-5">
                <p class="h3">Module Completion</p>
                <canvas id="moduleCompletionChart" class="dashboard-content-container p-2"></canvas>
            </div>

            <div class="col-12 col-md-5 offset-0 offset-md-1">
                <p class="h3">QnA Summary</p>
                <canvas id="qnaChart" class="dashboard-content-container p-2"></canvas>
            </div>
        </div>



@section Scripts {
    <script>
        $(document).ready(function () {
            const tour = new Shepherd.Tour({
                defaultStepOptions: {
                    cancelIcon: {
                        enabled: true
                    },
                    classes: 'shepherd-theme-arrows',
                    scrollTo: { behavior: 'smooth', block: 'center' }
                }
            });

            tour.addStep({
                title: 'Welcome to the Tour!',
                text: 'This is a guided tour of the features on this page.',
                buttons: [
                    {
                        text: 'Start',
                        action: tour.next
                    }
                ]
            });

            tour.addStep({
                title: 'Dashboard',
                text: 'The dashboard provides a summary for the day.',
                attachTo: {
                    element: '#dashboard',
                    on: 'right'
                },
                buttons: [
                    {
                        text: 'Back',
                        action: tour.back
                    },
                    {
                        text: 'Next',
                        action: tour.next
                    }
                ]
            });

            tour.addStep({
                title: 'User Management',
                text: 'Here you can manage users.',
                attachTo: {
                    element: '#users',
                    on: 'right'
                },
                buttons: [
                    {
                        text: 'Back',
                        action: tour.back
                    },
                    {
                        text: 'Next',
                        action: tour.next
                    }
                ]
            });

            tour.addStep({
                title: 'Content Management',
                text: 'Here you can manage content.',
                attachTo: {
                    element: '#content',
                    on: 'right'
                },
                buttons: [
                    {
                        text: 'Back',
                        action: tour.back
                    },
                    {
                        text: 'Next',
                        action: tour.next
                    }
                ]
            });
            tour.addStep({
                title: 'Code Smells and Refactoring Techniques Mapping Summary',
                text: 'Refer to the code smells and their associated refactoring techniques here as a reference whenever you encounter an unfamiliar code smell or technique..',
                attachTo: {
                    element: '#book-icon',
                    on: 'bottom'
                },
                buttons: [
                    {
                        text: 'Back',
                        action: tour.back
                    },
                    {
                        text: 'Next',
                        action: tour.next
                    }
                ]
            });

            tour.addStep({
                title: 'Notification',
                text: 'Here you can view and read notifications.',
                attachTo: {
                    element: '#notification-container',
                    on: 'bottom'
                },
                buttons: [
                    {
                        text: 'Back',
                        action: tour.back
                    },
                    {
                        text: 'Finish',
                        action: tour.complete
                    }
                ]
            });

            setTimeout(function () {
                tour.start();
            }, 2500);
        });

        // Data for the charts
        const quizResultsData = {
            labels: @Html.Raw(Json.Serialize(Model.QuizResultModules)),
            datasets: [{
                label: 'Average Quiz Results',
                data: @Html.Raw(Json.Serialize(Model.AverageQuizResults)),
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        };

        const contributorsData = {
            labels: @Html.Raw(Json.Serialize(Model.TopContributors)),
            datasets: [{
                label: 'Contributions',
                data: @Html.Raw(Json.Serialize(Model.Contributions)),
                backgroundColor: ['rgba(255, 99, 132, 0.2)'],
                borderColor: ['rgba(255, 99, 132, 1)'],
                borderWidth: 1
            }]
        };

        const moduleCompletionData = {
            labels: @Html.Raw(Json.Serialize(Model.ModuleCompletions.Select(mc => mc.CompletedDate.ToString("MMMM")))),
            datasets: [{
                label: 'Modules Completed',
                data: @Html.Raw(Json.Serialize(Model.ModuleCompletions.GroupBy(mc => mc.CompletedDate.ToString("MMMM")).Select(g => g.Count()))),
                borderColor: 'rgb(54, 162, 235)',
                tension: 0.1
            }]
        };

        const qnaData = {
            labels: @Html.Raw(Json.Serialize(Model.QuestionMonths)),
            datasets: [
                {
                    label: 'Open Questions',
                    data: @Html.Raw(Json.Serialize(Model.OpenQuestions)),
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                },
                {
                    label: 'Closed Questions',
                    data: @Html.Raw(Json.Serialize(Model.ClosedQuestions)),
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }
            ]
        };

        // Configurations for the charts
        const quizResultsConfig = new Chart(document.getElementById('quizResultsChart'), {
            type: 'bar',
            data: quizResultsData,
            options: {}
        });

        const contributorsConfig = new Chart(document.getElementById('contributorsChart'), {
            type: 'bar',
            data: contributorsData,
            options: {}
        });

        const moduleCompletionConfig = new Chart(document.getElementById('moduleCompletionChart'), {
            type: 'line',
            data: moduleCompletionData,
            options: {}
        });

        const qnaConfig = new Chart(document.getElementById('qnaChart'), {
            type: 'bar',
            data: qnaData,
            options: {
                scales: {
                    x: {
                        stacked: true
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });
    </script>
}

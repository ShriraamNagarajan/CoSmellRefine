@model CoSmellRefine.Models.ViewModels.ModuleViewModel
@{
    Layout = "~/Views/Shared/_UserLayout.cshtml";
    ViewData["Title"] = "CoSmellRefine";
}

<div class="container mt-5">
    <div class="card bg-transparent border-0">
        <div class="card-header bg-transparent">
            <a asp-controller="AdminContent" asp-action="List" class="btn dark-btn mb-5">
                <i class="fas fa-arrow-left"></i> Back
            </a>
            <h2>Edit Module</h2>
        </div>
        <div class="card-body bg-transparent border-0">
            <form asp-action="Edit" asp-controller="AdminContent" method="post">
                <!-- Step 1: Basic Details -->
                <div class="form-step active" id="step-1">
                    <div class="navigation-buttons">
                        <div></div>
                        <p class="h2"> Basic Details </p>
                        <button type="button" class="btn light-btn" onclick="nextStep(2)">
                            Reading Material <i class="fas fa-arrow-right"></i>
                        </button>
                    </div>
                    <div class="form-group">
                        <label for="codeSmellId">Code Smell:</label>
                        <select asp-for="CodeSmellId" asp-items="@(new SelectList(Model.CodeSmells, "Id", "Name"))" class="form-control" required>
                            <option value="">Select a code smell</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="moduleTitle">Module Title:</label>
                        <input type="text" class="form-control" id="moduleTitle" asp-for="Title" required>
                        <span class="text-danger" asp-validation-for="Title"></span>
                    </div>
                    <div class="form-group">
                        <label for="moduleDescription">Description:</label>
                        <textarea class="form-control" id="moduleDescription" asp-for="Description" required></textarea>
                        <span class="text-danger" asp-validation-for="Description"></span>
                    </div>
                    <input type="text" asp-for="Id" hidden />
                </div>
                <!-- Step 2: Reading Content -->
                <div class="form-step" id="step-2">
                    <div class="navigation-buttons">
                        <button type="button" class="btn dark-btn" onclick="prevStep(1)">
                            <i class="fas fa-arrow-left"></i> Basic Details
                        </button>
                        <p class="h2"> Reading Material </p>
                        <button type="button" class="btn light-btn" onclick="nextStep(3)">
                            Video Upload <i class="fas fa-arrow-right"></i>
                        </button>
                    </div>
                    <div class="form-group">
                        <label for="readingContent">Reading Content:</label>
                        <textarea class="form-control" id="readingContent" asp-for="ReadingContent" required></textarea>
                        <span class="text-danger" asp-validation-for="ReadingContent"></span>
                    </div>
                </div>
                <!-- Step 3: Video Upload -->
                <div class="form-step" id="step-3">
                    <div class="navigation-buttons">
                        <button type="button" class="btn dark-btn" onclick="prevStep(2)">
                            <i class="fas fa-arrow-left"></i> Reading Material
                        </button>
                        <p class="h2"> Video Upload </p>
                        <button type="button" class="btn light-btn" onclick="nextStep(4)">
                            Flashcards <i class="fas fa-arrow-right"></i>
                        </button>
                    </div>
                    <div id="videos">
                        <div class="form-group">
                            <label class="form-label">Video Upload</label>
                            <input type="file" id="videoUpload" class="form-control"/>
                                @if (Model.VideoUrls.Count() > 0)
                            {
                                <video controls id="videoElement" class="mt-2 w-50">
                                    <source src="@Model.VideoUrls.FirstOrDefault()" type="video/mp4" id="videoDisplay">
                                    Your browser does not support the video tag.
                                </video>

                            }
                            else
                            {
                                <video controls width="250" id="videoElement" class="mt-2" style="display:none;">
                                    <source src="" type="video/mp4" id="videoDisplay">
                                    Your browser does not support the video tag.
                                </video>
                                        
                            }

                        </div>
                        <div class="spinner-border ms-5 mt-2" role="status" style="display:none" id="videoSpinner">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="form-group">
                            <input type="text" class="form-control" id="videoUrl" asp-for="VideoUrls[0]" hidden />
                        </div>
                    </div>


                </div>
                <!-- Step 4: Flashcards -->
                <div class="form-step" id="step-4">
                    <div class="navigation-buttons">
                        <button type="button" class="btn dark-btn" onclick="prevStep(3)">
                            <i class="fas fa-arrow-left"></i> Video Upload
                        </button>
                        <p class="h2"> Flashcards </p>
                        <button type="button" class="btn light-btn" onclick="nextStep(5)">
                            Quiz <i class="fas fa-arrow-right"></i>
                        </button>
                    </div>
                    <div id="flashcards">
                        @for (int i = 0; i < Model.Flashcards.Count; i++)
                        {
                            <div class="flashcard">
                                <div class="form-group">
                                    <label for="flashcardQ@(i + 1)">Question @(i + 1):</label>
                                    <input type="text" class="form-control" asp-for="Flashcards[i].Question" required>
                                </div>
                                <div class="form-group">
                                    <label for="flashcardA@(i + 1)">Answer @(i + 1):</label>
                                    <input type="text" class="form-control" asp-for="Flashcards[i].Answer" required>
                                </div>
                            </div>
                        }
                    </div>
                    <button type="button" class="btn btn-secondary mt-3" onclick="addFlashcard()">Add Flashcard</button>
                </div>
                <!-- Step 5: Quiz -->
                <div class="form-step" id="step-5">
                    <div class="navigation-buttons">
                        <button type="button" class="btn dark-btn" onclick="prevStep(4)">
                            <i class="fas fa-arrow-left"></i> Flashcards
                        </button>
                        <p class="h2"> Quiz </p>
                        <button type="submit" class="btn btn-success">Update</button>
                    </div>
                    <div id="quiz">
                        @for (int i = 0; i < Model.Quizzes.Count; i++)
                        {
                            <div class="quiz-question">
                                <div class="form-group">
                                    <label for="quizQ@(i+1)">Question @(i + 1):</label>
                                    <input type="text" class="form-control" asp-for="Quizzes[i].Question" required>
                                </div>
                                @for (int j = 0; j < Model.Quizzes[i].Choices.Count; j++)
                                {
                                    <div class="form-group">
                                        <label for="quizQ@iChoice@(j+1)">Choice @(j + 1):</label>
                                        <input type="text" class="form-control" asp-for="Quizzes[i].Choices[j]" required>
                                    </div>
                                }
                                <div class="form-group">
                                    <label for="quizQ@iAnswer">Correct Answer:</label>
                                    <input type="text" class="form-control" asp-for="Quizzes[i].Answer" required>
                                </div>
                            </div>
                        }
                    </div>
                    <button type="button" class="btn btn-secondary mt-3" onclick="addQuizQuestion()">Add Quiz Question</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {

    <script>
        var editor = new FroalaEditor('#readingContent', {
            imageUploadURL: '/api/media'
        });
        // Get elements by their IDs
        const videoUpload = document.getElementById('videoUpload');
        const videoUrl = document.getElementById('videoUrl');
        const videoDisplay = document.getElementById('videoDisplay');
        const videoElement = document.getElementById('videoElement');
        const videoSpinner = document.getElementById('videoSpinner');

        // Function to upload video
        async function uploadVideo(e) {
            videoSpinner.style.display = 'block';
            console.log(e.target.files[0]);

            let data = new FormData();
            data.append('file', e.target.files[0]);

            try {
                let response = await fetch('/api/media', {
                    method: 'POST',
                    headers: {
                        'Accept': '*/*',
                    },
                    body: data
                });

                let result = await response.json();

                if (response.ok) {
                    videoUrl.value = result.link;
                    videoDisplay.src = result.link;
                    videoElement.style.display = 'block';
                    videoSpinner.style.display = 'none';
                    videoElement.load();
                } else {
                    console.error('Video upload failed:', result);
                    alert('Video upload failed: ' + result.message);
                }
            } catch (error) {
                console.error('Error uploading video:', error);
                alert('Error uploading video: ' + error.message);
            }
        }

        // Add event listener for video upload
        videoUpload.addEventListener('change', uploadVideo);


        let videoCount = 1;
        let flashcardCount = @Model.Flashcards.Count;
        let quizQuestionCount = @Model.Quizzes.Count;

        function nextStep(step) {
            const currentStep = document.querySelector('.form-step.active');

            //check for empty fields
            const requiredFields = currentStep.querySelectorAll('input[required], textarea[required], select[required]');
            let emptyFields = false;

            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    emptyFields = true;
                    field.classList.add('is-invalid'); 
                } else {
                    field.classList.remove('is-invalid'); 
                }
            });

            if (emptyFields) {
                Swal.fire({
                    title: "Required Fields Missing",
                    text: "Please fill all required fields before moving on to the next step.",
                    icon: "error",
                    button: "OK",
                });
                return;
            }

            const nextStep = document.getElementById(`step-${step}`);
            if (nextStep) {
                currentStep.classList.remove('active');
                nextStep.classList.add('active');
            }
        }

        function prevStep(step) {
            const currentStep = document.querySelector('.form-step.active');
            const prevStep = document.getElementById(`step-${step}`);
            if (prevStep) {
                currentStep.classList.remove('active');
                prevStep.classList.add('active');
            }
        }

        function addFlashcard() {
            flashcardCount++;
            const flashcardsDiv = document.getElementById('flashcards');
            const newFlashcard = document.createElement('div');
            newFlashcard.classList.add('flashcard');
            newFlashcard.innerHTML = `
                                <div class="form-group">
                                    <label for="flashcardQ${flashcardCount}">Question ${flashcardCount}:</label>
                                    <input type="text" class="form-control" id="flashcardQ${flashcardCount}" name="Flashcards[${flashcardCount-1}].Question" required>
                                </div>
                                <div class="form-group">
                                    <label for="flashcardA${flashcardCount}">Answer ${flashcardCount}:</label>
                                    <input type="text" class="form-control" id="flashcardA${flashcardCount}" name="Flashcards[${flashcardCount-1}].Answer" required>
                                </div>
                            `;
            flashcardsDiv.appendChild(newFlashcard);
        }

        function addQuizQuestion() {
            quizQuestionCount++;
            const quizDiv = document.getElementById('quiz');
            const newQuizQuestion = document.createElement('div');
            newQuizQuestion.classList.add('quiz-question');
            newQuizQuestion.innerHTML = `
                                <div class="form-group">
                                    <label for="quizQ${quizQuestionCount}">Question ${quizQuestionCount}:</label>
                                    <input type="text" class="form-control" id="quizQ${quizQuestionCount}" name="Quizzes[${quizQuestionCount-1}].Question" required>
                                </div>
                                ${[...Array(4).keys()].map(j => `
                                    <div class="form-group">
                                        <label for="quizQ${quizQuestionCount}Choice${j}">Choice ${j + 1}:</label>
                                        <input type="text" class="form-control" id="quizQ${quizQuestionCount}Choice${j}" name="Quizzes[${quizQuestionCount-1}].Choices[${j}]" required>
                                    </div>
                                `).join('')}
                                <div class="form-group">
                                    <label for="quizQ${quizQuestionCount}Answer">Correct Answer:</label>
                                    <input type="text" class="form-control" id="quizQ${quizQuestionCount}Answer" name="Quizzes[${quizQuestionCount-1}].Answer" required>
                                </div>
                            `;
            quizDiv.appendChild(newQuizQuestion);
        }

        // Initialize the first step as active
        document.getElementById('step-1').classList.add('active');
    </script>

}

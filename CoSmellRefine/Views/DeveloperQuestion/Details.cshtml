@model CoSmellRefine.Models.ViewModels.QuestionDetailViewModel
﻿@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager


@{
    Layout = "~/Views/Shared/_UserLayout.cshtml";
    ViewData["Title"] = "CoSmellRefine";
    var userId = UserManager.GetUserId(User);
    var currentUser = await UserManager.GetUserAsync(User);
    var roles = await UserManager.GetRolesAsync(currentUser);
}


<div class="sidebar-container">
    @if (roles.Contains("Admin"))
    {
        <partial name="_AdminSidebar" />
    }
    else if (roles.Contains("Moderator"))
    {
        <partial name="_ModeratorSidebar" />
    }
    else if (roles.Contains("Developer"))
    {
        <partial name="_DeveloperSidebar" />
    }
    <section class="user-main dashboard-content p-5">
        <div class="container">
            <a asp-controller="DeveloperQuestion" asp-action="List" class="btn dark-btn mb-5">
                <i class="fas fa-arrow-left"></i> Back
            </a>
            <div class="row justify-content-center mb-5">
                <div class="col-md-12">
                    <div class="card mt-3 rounded" style="background-color: #fff !important;">
                        @if (!Model.Question.IsDeleted)
                        {
                            <div class="card-header" style="background-color: #fff !important; border:none;">

                                <div class="d-flex justify-content-end align-items-start">
                                    @if (Model.Question.User.Id == userId && Model.Question.Status.Equals(CoSmellRefine.Utility.QuestionStatus.Open))
                                    {
                                        <div class="dropdown">
                                            <div id="questionOptions" data-bs-toggle="dropdown" aria-expanded="false" style="cursor:pointer;">
                                                <i class="bi bi-three-dots h3"></i>
                                            </div>
                                            <ul class="dropdown-menu" aria-labelledby="questionOptions">
                                                <li><a class="dropdown-item close-question" href="#" data-question-id="@Model.Question.Id">Close Question</a></li>
                                            </ul>
                                        </div>
                                    }
                                </div>
                                <div class="d-flex justify-content-between align-items-start mt-0 pt-0 mb-1">
                                    @if (Model.Question.Status.Equals(CoSmellRefine.Utility.QuestionStatus.Open))
                                    {
                                        <span class="badge bg-success">@Model.Question.Status</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">@Model.Question.Status</span>
                                    }
                                    @if (Model.Question.Type.Equals(CoSmellRefine.Utility.QuestionType.CodeSmellIdentification))
                                    {
                                        <span class="badge bg-primary">@Model.Question.Type</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">@Model.Question.Type</span>
                                    }

                                </div>
                             
                            </div>
                            
                        }
                        <div class="card-body d-flex flex-row p-2">
                            @if (Model.Question.IsDeleted)
                            {
                                <div class="alert alert-danger d-flex justify-content-center align-items-center" role="alert">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    <div class="d-flex justify-content-center align-items-cetner">
                                        This item has been removed due to inappropriate content.
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex flex-column justify-content-start align-items-center" style="width:10%;">
                                    <img src="https://via.placeholder.com/64" class="rounded-circle mb-1" alt="User Image">

                                </div>
                                <div class="question-content p-1" style="border-radius:5px; width:90%;">
                                    <p class="h4">@Model.Question.Title</p>
                                    <p>@Model.Question.Body</p>

                                    @foreach (var codeSmell in Model.Question.CodeSmellList)
                                    {
                                        <span class="badge bg-primary h1"> @codeSmell.Name </span>
                                    }


                                    <div class="editor question-editor w-100">
                                        @Model.Question.CodeSnippet
                                    </div>
                                    <div class="question-supporting-images mt-3 w-25">
                                        @foreach (var image in Model.Question.Images)
                                        {
                                            <img src="@image.ImageUrl" alt="Supporting Image" class="img-fluid w-100 border border-dark">
                                        }
                                    </div>
                                </div>
                                
                            }
               
                        </div>
                        <div class="card-footer action-buttons d-flex flex-row justify-content-between mt-2" style="border:none; background:#fff !important;">
                            @if (!Model.Question.IsDeleted)
                            {

                                @if (Model.Question.User.Id == userId)
                                {
                                    <button id="getFinalAnswerButton" data-question-id="@Model.Question.Id" class="btn light-btn">Get Final Answer</button>
                                }
                                else
                                {
                                    @if (Model.Question.Status.Equals(CoSmellRefine.Utility.QuestionStatus.Open))
                                    {
                                        <button class="btn light-btn" data-bs-toggle="modal" data-bs-target="#answerModal">Post your answer</button>

                                    }

                                }
                                <p class="text-center"> Asked by @Model.Question.User.UserName </p>
                                @if (Model.Question.Status.Equals(CoSmellRefine.Utility.QuestionStatus.Open))
                                {
                                    <button class="btn btn-danger ml-2" data-bs-toggle="modal" data-bs-target="#reportModal-Question"><i class="bi bi-flag"></i></button>
                                    
                                }

                                
                            }

                           
                        </div>
                    </div>
                </div>
            </div>

            <p class="h2 mt-5 pt-5">@Model.Responses.Count @(Model.Responses.Count>1 ? "Answers" : "Answer")</p>
            <div class="row justify-content-center">
                @foreach (var response in Model.Responses)
                {
                    <div class="col-md-12 m-2">
                        <div class="card mt-3 rounded" style="background-color: #fff !important;">
                            <div class="card-body d-flex flex-row p-2">
                                @if (response.IsDeleted)
                                {
                                    <div class="alert alert-danger d-flex justify-content-center align-items-center" role="alert">
                                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                        <div class="d-flex justify-content-center align-items-cetner">
                                            This item has been removed due to inappropriate content.
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex flex-column justify-content-start align-items-center" style="width:10%;">
                                        <img src="https://via.placeholder.com/64" class="rounded-circle mb-1" alt="User Image">

                                        <div class="d-flex flex-column justify-content-center align-items-center">
                                            <i class="bi bi-caret-up-fill h2"></i>
                                            <p class="h4 m-0 vote-count" data-response-id="@response.Id">@response.VoteCount</p>
                                            <i class="bi bi-caret-down-fill h2"></i>
                                        </div>
                                    </div>
                                    <div class="question-content ms-2" style="width:90%;">
                                        <div class="d-flex flex-row justify-content-end align-items-center">
                                            @if (response.VoteByUser == null)
                                            {
                                                <!-- No vote by user, show unfilled icons -->
                                                <i class="bi bi-hand-thumbs-up m-2 h3 vote-btn" data-response-id="@response.Id" data-vote-type="upvote"></i>
                                                <i class="bi bi-hand-thumbs-up-fill m-2 h3 voted-btn" data-response-id="@response.Id" data-vote-type="upvote" style="display:none;"></i>
                                                <i class="bi bi-hand-thumbs-down m-2 h3 vote-btn" data-response-id="@response.Id" data-vote-type="downvote"></i>
                                                <i class="bi bi-hand-thumbs-down-fill m-2 h3 voted-btn" data-response-id="@response.Id" data-vote-type="downvote" style="display:none;"></i>
                                            }
                                            else
                                            {
                                                if (response.VoteByUser.IsUpvote)
                                                {
                                                    <!-- User has upvoted, show filled thumbs-up and unfilled thumbs-down -->
                                                    <i class="bi bi-hand-thumbs-up m-2 h3 vote-btn" data-response-id="@response.Id" data-vote-type="upvote" style="display:none;"></i>
                                                    <i class="bi bi-hand-thumbs-up-fill m-2 h3 voted-btn" data-response-id="@response.Id" data-vote-type="upvote"></i>
                                                    <i class="bi bi-hand-thumbs-down m-2 h3 vote-btn" data-response-id="@response.Id" data-vote-type="downvote"></i>
                                                    <i class="bi bi-hand-thumbs-down-fill m-2 h3 voted-btn" data-response-id="@response.Id" data-vote-type="downvote" style="display:none;"></i>
                                                }
                                                else
                                                {
                                                    <!-- User has downvoted, show unfilled thumbs-up and filled thumbs-down -->
                                                    <i class="bi bi-hand-thumbs-up m-2 h3 vote-btn" data-response-id="@response.Id" data-vote-type="upvote"></i>
                                                    <i class="bi bi-hand-thumbs-up-fill m-2 h3 voted-btn" data-response-id="@response.Id" data-vote-type="upvote" style="display:none;"></i>
                                                    <i class="bi bi-hand-thumbs-down m-2 h3 vote-btn" data-response-id="@response.Id" data-vote-type="downvote" style="display:none;"></i>
                                                    <i class="bi bi-hand-thumbs-down-fill m-2 h3 voted-btn" data-response-id="@response.Id" data-vote-type="downvote"></i>
                                                }
                                            }
                                        </div>
                                        <p class="h4">@Html.Raw(response.Body)</p>
                                        <div class="editor question-editor w-100">
                                            @response.CodeSnippet
                                        </div>
                                        <div>
                                            @foreach (var codeSmell in response.CodeSmellList)
                                            {
                                                <span class="badge bg-primary h1"> @codeSmell.Name </span>
                                            }
                                        </div>
                                        <div>
                                            @foreach (var refactoringTechnique in response.RefactoringTechniques)
                                            {
                                                <span class="badge bg-secondary h1"> @refactoringTechnique.Name </span>
                                            }
                                        </div>


                                    </div>
                                    
                                }
                   
                            </div>
                            @if (!response.IsDeleted)
                            {
                                <div class="card-footer action-buttons d-flex flex-column mt-2" style="border:none; background:#fff !important;">
                                    <div class="d-flex flex-row justify-content-between">
                                        <div>
                                            <button class="btn light-btn comment-btn" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-@response.Id" aria-expanded="false" aria-controls="collapseExample-@response.User.Id">View comments</button>
                                            <button class="btn light-btn" data-bs-toggle="modal" data-bs-target="#commentModal-@response.Id">Add a comment</button>
                                        </div>
                                        <p class="text-center"> Answered by @response.User.UserName </p>
                                        <button class="btn btn-danger ml-2" data-bs-toggle="modal" data-bs-target="#reportModal-@response.Id"><i class="bi bi-flag"></i></button>
                                    </div>
                                </div>
                                <div class="collapse" id="collapseExample-@response.Id">
                                    @foreach (var comment in response.ResponseComments)
                                    {
                                        <div class="card card-body">
                                            @comment.Body
                                            <small class="text-muted">@comment.User.UserName replied @comment.CommentDate</small>
                                        </div>
                                    }

                                </div>
                                
                            }
 
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Modals for answer, report, and comment -->
        <!-- Answer Modal -->
        <div class="modal fade" id="answerModal" tabindex="-1" aria-labelledby="answerModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content" style="background-color:#D0E2FB;">
                    <div class="modal-header">
                        <h5 class="modal-title" id="answerModalLabel">Post Your Answer</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" id="answer-body">
                        <form asp-action="AddResponse" method="post" onsubmit="updateCodeSnippet()">
                            <input type="hidden" name="QuestionId" value="@Model.AddResponse.QuestionId" />
                            <div class="form-group">
                                <label for="answer-body">Answer Description</label>
                                <textarea id="froala-editor" name="Body" class="form-control"></textarea>
                            </div>
                            <div class="form-group">
                                <label for="code-snippet">Code Snippet</label>
                                <div class="response-editor question-editor" id="codeSnippetEditor"></div>
                                <input type="hidden" id="codeSnippetText" name="CodeSnippet" />
                            </div>
                            <div class="form-group">
                                <p>Code Smell Tags (If applicable)</p>
                                <select name="SelectedCodeSmellIds" class="form-control" id="code-smell-tags" multiple="multiple" style="width: 100%;">
                                    @foreach (var codeSmell in Model.AddResponse.CodeSmells)
                                    {
                                        <option value="@codeSmell.Value">@codeSmell.Text</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <p>Refactoring Techniques Tags (if applicable)</p>
                                <select name="SelectedRefactoringTechniqueIds" class="form-control tag-select" multiple="multiple" style="width: 100%;" id="refactoring-techniques-tags">
                                    @foreach (var refactoringTechnique in Model.AddResponse.RefactoringTechniques)
                                    {
                                        <option value="@refactoringTechnique.Value">@refactoringTechnique.Text</option>
                                    }
                                </select>
                            </div>
                            <div class="d-flex justify-content-center align-items-center m-2">
                                <button type="submit" class="btn light-btn">Post</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Report Modals -->
        <div class="modal fade" id="reportModal-Question" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content" style="background-color:#D0E2FB;">
                    <div class="modal-header">
                        <p class="h3">Report Question</p>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form class="report-form" data-report-type="Question" data-discussion-item-id="@Model.Question.Id">
                            <input type="hidden" name="QuestionId" value="@Model.Question.Id" />
                            <input type="hidden" name="DiscussionItemId" value="@Model.Question.Id" />
                            <input type="hidden" name="DiscussionType" value="Question" />
                            <div class="form-group">
                                <label for="report-reason">Reason</label>
                                <textarea id="froala-editor-report-Question" name="Reason" class="form-control"></textarea>
                            </div>
                            <div class="d-flex justify-content-center align-items-center m-2">
                                <button type="submit" class="btn light-btn">Submit</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        @foreach (var response in Model.Responses)
        {
            <div class="modal fade" id="reportModal-@response.Id" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content" style="background-color:#D0E2FB;">
                        <div class="modal-header">
                            <p class="h3">Report Response</p>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form class="report-form" data-report-type="Response" data-discussion-item-id="@response.Id">
                                <input type="hidden" name="QuestionId" value="@Model.Question.Id" />
                                <input type="hidden" name="DiscussionItemId" value="@response.Id" />
                                <input type="hidden" name="DiscussionType" value="Response" />
                                <div class="form-group">
                                    <label for="report-reason">Reason</label>
                                    <textarea id="froala-editor-report-@response.Id" name="Reason" class="form-control"></textarea>
                                </div>
                                <div class="d-flex justify-content-center align-items-center m-2">
                                    <button type="submit" class="btn light-btn">Submit</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }


        <!-- Comment Modals -->
        @foreach (var response in Model.Responses)
        {
            <div class="modal fade" id="commentModal-@response.Id" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content" style="background-color:#D0E2FB;">
                        <div class="modal-header">
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form asp-action="AddComment" method="post">
                                <input type="hidden" name="AddResponseComment.QuestionId" value="@Model.Question.Id" />
                                <input type="hidden" name="AddResponseComment.ResponseId" value="@response.Id" />
                                <div class="form-group">
                                    <label for="comment-body">Comment</label>
                                    <textarea id="froala-editor-@response.Id" name="AddResponseComment.Body" class="form-control"></textarea>
                                </div>
                                <div class="d-flex justify-content-center align-items-center m-2">
                                    <button type="submit" class="btn light-btn">Post</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
        <!-- Get Final Answer Modal -->
        <div class="modal fade" id="annotatedCodeSnippetModal" tabindex="-1" aria-labelledby="annotatedCodeSnippetModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content" style="background-color:#D0E2FB;">
                    <div class="modal-header">
                        <h5 class="modal-title" id="annotatedCodeSnippetModalLabel">Annotated Code Snippet</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="answerEditor" class="editor question-editor w-100"></div>
                        <div class="d-flex justify-content-center align-items-center">
                            <button type="button" class="btn light-btn mt-3" id="showCreateIssueFields">
                                Create Issue
                            </button>
                        </div>
                        <!-- Create Issue Form Fields -->
                        <form id="createIssueForm" class="mt-4" style="display: none;">
                            <div class="mb-3">
                                <label for="issueTitle" class="form-label">Title</label>
                                <input type="text" class="form-control" id="issueTitle" name="Title" required>
                            </div>
                            <div class="mb-3">
                                <label for="repoSelect" class="form-label">Repository</label>
                                <select class="form-select" id="repoSelect" name="Repo" required>
                                    <!-- Repositories will be populated here -->
                                    @if (Model.CreateIssue.Repositories!=null)
                                    {
                                        @foreach (var repo in Model.CreateIssue.Repositories)
                                        {
                                            <option value="@repo.Value">@repo.Text</option>
                                        }
                                        
                                    }
                            
                                </select>
                            </div>
                            <input type="hidden" id="issueBody" name="Body" value="">
                            <input type="hidden" id="issueOwner" name="Owner" value="@Model.CreateIssue.Owner">
                            <div class="modal-footer d-flex justify-content-center align-items-center">
                                <button type="submit" class="btn dark-btn">Create</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>


        
    </section>
</div>

@section Scripts {


    @if (roles.Contains("Admin"))
    {
        <script src="/js/admin_sidebar.js"></script>
    }
    else if (roles.Contains("Moderator"))
    {
        <script src="/js/moderator_sidebar.js"></script>
    }
    else if (roles.Contains("Developer"))
    {
        <script src="/js/developer_sidebar.js"></script>
    }

    <script>
        $(document).ready(function () {
            // Initialize Froala Editor
            new FroalaEditor('#froala-editor', {
                height: 200
            });

            // Initialize ACE Editor
            document.querySelectorAll('.editor').forEach(function (editorEl) {
                var editor = ace.edit(editorEl);
                editor.setTheme("ace/theme/github");
                editor.session.setMode("ace/mode/csharp");
                editor.setReadOnly(true);
            });

            //Comment button configuration
            $('.comment-btn').click(function () {
                if ($(this).text() == "View comments") {
                    $(this).text("Hide comments");
                } else {
                    $(this).text("View comments");
                }
            });

            $('#code-smell-tags').select2({
                placeholder: "Select code smell tags",
                allowClear: true,
                dropdownParent: $('#answer-body')
            });

            $('#refactoring-techniques-tags').select2({
                placeholder: "Select refactoring technique tags",
                allowClear: true,
                dropdownParent: $('#answer-body')
            });

            // Vote button click handler
            $('.vote-btn').click(function () {
                var responseId = $(this).data('response-id');
                var voteType = $(this).data('vote-type');
                var isUpvote = voteType === 'upvote';

                $.ajax({
                    url: '@Url.Action("AddVote", "Vote")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ ResponseId: responseId, IsUpvote: isUpvote }),
                    success: function () {
                        updateVoteCount(responseId);
                        updateVoteState(responseId, voteType);
                    },
                    error: function () {
                        alert('Error while voting.');
                    }
                });
            });

            var answerEditor = ace.edit("answerEditor");
            answerEditor.setTheme("ace/theme/monokai"); 
            answerEditor.session.setMode("ace/mode/csharp"); 

            $('#getFinalAnswerButton').click(function () {
                var questionId = $(this).attr('data-question-id');
                console.log(questionId);

                $.ajax({
                    url: '@Url.Action("GetFinalAnswer", "DeveloperQuestion")',
                    type: 'GET',
                    data: { questionId: questionId },
                    success: function (data) {
                        if (data.success) {
                            // Display the annotated code snippet in a pop-up
                            answerEditor.setValue(data.codeSnippet, -1);
                            $('#annotatedCodeSnippetModal').modal('show');
                        } else {
                            alert(data.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                        alert('Error fetching final answer.');
                    }
                });
            });

            // Function to update vote count
            function updateVoteCount(responseId) {
                $.ajax({
                    url: '/api/Vote/' + responseId + '/totalVotes',
                    type: 'GET',
                    success: function (totalVotes) {
                        $('.vote-count[data-response-id="' + responseId + '"]').text(totalVotes);
                    },
                    error: function () {
                        alert('Error while updating vote count.');
                    }
                });
            }

            // Function to update vote state
            function updateVoteState(responseId, voteType) {
                var upvoteBtn = $('.vote-btn[data-response-id="' + responseId + '"][data-vote-type="upvote"]');
                var upvotedBtn = $('.voted-btn[data-response-id="' + responseId + '"][data-vote-type="upvote"]');
                var downvoteBtn = $('.vote-btn[data-response-id="' + responseId + '"][data-vote-type="downvote"]');
                var downvotedBtn = $('.voted-btn[data-response-id="' + responseId + '"][data-vote-type="downvote"]');

                if (voteType === 'upvote') {
                    upvoteBtn.hide();
                    upvotedBtn.show();
                    downvoteBtn.show();
                    downvotedBtn.hide();
                    
                } else if (voteType === 'downvote') {
                    upvoteBtn.show();
                    upvotedBtn.hide();
                    downvoteBtn.hide();
                    downvotedBtn.show();
                }
            }

            // Initialize the edit-enabled ACE Editor
            var codeSnippetEditor = ace.edit("codeSnippetEditor");
            codeSnippetEditor.setTheme("ace/theme/github");
            codeSnippetEditor.session.setMode("ace/mode/csharp");

            window.updateCodeSnippet = function () {
                var codeSnippet = codeSnippetEditor.getValue();
                $('#codeSnippetText').val(codeSnippet);
            };

            // Report form submission
            document.querySelectorAll('.report-form').forEach(form => {
                form.addEventListener('submit', async function (e) {
                    e.preventDefault();

                    var formData = new FormData(form);
                    var data = Object.fromEntries(formData.entries());

                    try {
                        const response = await fetch('@Url.Action("AddReportIssue", "DeveloperQuestion")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(data)
                        });

                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }

                        $(form).closest('.modal').modal('hide');
                        Swal.fire({
                            icon: 'success',
                            title: 'Report Submitted',
                            text: 'Your report has been submitted.',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'There was an issue submitting your report. Please try again.',
                            timer: 2000,
                            showConfirmButton: false
                        });
                        console.error('There was a problem with the fetch operation:', error);
                    }
                });
            });



            // Close question with SweetAlert confirmation
            document.querySelectorAll('.close-question').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();

                    var questionId = this.getAttribute('data-question-id');

                    Swal.fire({
                        title: 'Are you sure?',
                        text: "Closing the question will no longer receive any responses and it can't be undone.",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, close it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '@Url.Action("CloseQuestion", "DeveloperQuestion")' + '?id=' + questionId;
                        }
                    });
                });
            });

            // Show the Create Issue form fields when the button is clicked
            document.getElementById('showCreateIssueFields').addEventListener('click', function () {
                document.getElementById('createIssueForm').style.display = 'block';
                this.style.display = 'none'; // Hide the "Create Issue" button
            });

            // Handle form submission
            document.getElementById('createIssueForm').addEventListener('submit', function (event) {
                event.preventDefault();

                // Get the form data
                var title = document.getElementById('issueTitle').value;
                var repo = document.getElementById('repoSelect').value;
                var owner = document.getElementById('issueOwner').value;
               

                // Get the content from the editor
                var body = answerEditor.getValue();

                // Prepare the issue data
                var issueData = {
                    Title: title,
                    Body: body,
                    Repo: repo,
                    Owner: owner
                };

                // Submit the issue via AJAX
                fetch('/DeveloperQuestion/CreateIssue', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(issueData)
                }).then(response => {
                    if (response.ok) {
                        // Handle success (e.g., close modal, show success message)
                        $('#annotatedCodeSnippetModal').modal('hide');
                        Swal.fire({
                            title: 'Success!',
                            text: 'Issue created successfully!',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        // Handle error
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to create issue.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }).catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred.');
                });
            });
        });
    </script>
}

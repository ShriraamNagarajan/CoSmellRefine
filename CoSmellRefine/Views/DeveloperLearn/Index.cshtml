@model CoSmellRefine.Models.ViewModels.LearnDashboardViewModel
@{
    Layout = "~/Views/Shared/_UserLayout.cshtml";
    ViewData["Title"] = "CoSmellRefine";
    string progressImage;
    if (Model.Progress >= 1.0)
    {
        progressImage = "/images/progress100.svg";
    }
    else if (Model.Progress >= 0.8)
    {
        progressImage = "/images/progress80.svg";
    }
    else if (Model.Progress >= 0.6)
    {
        progressImage = "/images/progress60.svg";
    }
    else if (Model.Progress >= 0.4)
    {
        progressImage = "/images/progress40.svg";
    }
    else if (Model.Progress >= 0.2)
    {
        progressImage = "/images/progress20.svg";
    }
    else
    {
        progressImage = "/images/progress0.svg";
    }
}

<div class="sidebar-container">
    <partial name="_DeveloperSidebar" />
    <section class="user-main dashboard-content p-5">
        <div class="container">
            <div class="row mb-5">
                <div class="col-9 d-flex justify-content-center align-items-center stick-out" style="background-color: #BEE8FF; border-radius:10px;">
                    <img src="@progressImage" class="figure-img img-fluid rounded" alt="...">
                </div>
                <div class="col-2 offset-1 d-flex flex-column justify-content-around align-items-start">
    
                    <a asp-controller="DeveloperLearn" asp-action="Modules" class="d-flex justify-content-center align-items-center p-2 w-100 learn-button resume" style="text-decoration: none; color: inherit;">
                        <div>
                            <p class="text-center">Let's Study<br><i class="bi bi-play-fill"></i></p>
                        </div>
                    </a>

                </div>
            </div>
            <div class="row mb-5">
                <div class="col-5">
                    <div class="row stick-out" style="background-color: #fff; border-radius:10px;">
                        <div class="col-6 d-flex flex-column justify-content-center align-items-center">
                            <img src="/images/module_stat.svg" class="figure-img img-fluid rounded" alt="...">
                            <p> @Model.CompletedModules/@Model.TotalModules Modules </p>
                        </div>
                        <div class="col-6 d-flex flex-column justify-content-center align-items-center">
                            <img src="/images/quiz_stat.svg" class="figure-img img-fluid rounded" alt="...">
                            <p> @Model.AverageQuizScore.ToString()% </p>
                        </div>
                    </div>
                    <div class="row mt-2 stick-out" style="background-color: #fff; border-radius:10px;">
                        <div class="col-6 d-flex flex-column justify-content-center align-items-center">
                            <p class="h5 text-center">Module Completion </p>
                            <div id="progress1" class="progress-container"></div>
                        </div>
                        <div class="col-6 d-flex flex-column justify-content-center align-items-center">
                            <p class="h5 text-center"> Avearge Quiz Performance </p>
                            <div id="progress2" class="progress-container"></div>
                        </div>
                    </div>
                </div>
                <div class="col-6 offset-1 h-100 stick-out p-2" style="background-color: #fff; border-radius:10px;">
                    <p class="h4 text-center"> Quiz Scores Over Time</p>
                    <div class="chart-container h-100">
                        <canvas id="quizScoresChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

    </section>
</div>


@section Scripts {
    <script src="/js/developer_sidebar.js"></script>
    <script>
        // Progress bar 1
        var progressBar1 = new ProgressBar.Circle('#progress1', {
            color: '#FCB03C',
            strokeWidth: 8,
            trailWidth: 3,
            easing: 'bounce',
            text: {
                value: '0',
                style: {
                    color: '#000',
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    padding: 0,
                    margin: 0,
                    transform: {
                        prefix: true,
                        value: 'translate(-50%, -50%)'
                    }
                }
            },
            step: function (state, circle) {
                circle.setText((circle.value() * @Model.TotalModules).toFixed(0) + '/@Model.TotalModules');
            }
        });
        progressBar1.animate(@Model.CompletedModules/@Model.TotalModules);  // Number from 0.0 to 1.0

        // Progress bar 2
        var progressBar2 = new ProgressBar.Circle('#progress2', {
            color: '#FCB03C',
            strokeWidth: 8,
            trailWidth: 3,
            easing: 'bounce',
            text: {
                value: '0%',
                style: {
                    color: '#000',
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    padding: 0,
                    margin: 0,
                    transform: {
                        prefix: true,
                        value: 'translate(-50%, -50%)'
                    }
                }
            },
            step: function (state, circle) {
                circle.setText((circle.value() * 100).toFixed(0) + '%');
            }
        });
        progressBar2.animate(@Model.AverageQuizScore/100);  // Number from 0.0 to 1.0

        // Quiz Scores Over Time chart
                var ctx = document.getElementById('quizScoresChart').getContext('2d');
        var quizScoresChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.QuizDates)),
                datasets: [{
                    label: 'Quiz Scores',
                    data: @Html.Raw(Json.Serialize(Model.QuizScores)),
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100
                    }
                }
            }
        });
    </script>
}